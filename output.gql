schema {
  query: RootQuery
  mutation: RootMutation
}

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type RootQuery {
  """Get all of our potential clients"""
  potentialClients(id: Int): [PotentialClientType]

  """Get a list of all my Notifications"""
  notifications: [NotificationType!]

  """Get the details of a Notification & mark as read"""
  notification(id: Int!): NotificationType

  """Get my Notifications settings"""
  notificationSettings: UserSettingType

  """The ID of the object"""
  orgExecutive(id: ID!): ExecutiveType

  """Get a list of Org Executive items"""
  orgExecutiveList(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, position_Id: Float, category_Id: Float, startTenure: Date, current: Boolean): ExecutiveTypeConnection

  """The ID of the object"""
  orgLeadershipCategory(id: ID!): LeadershipCategoryType

  """Get a list of Org LeadershipCategory items"""
  orgLeadershipCategoryList(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, name: String): LeadershipCategoryTypeConnection

  """The ID of the object"""
  websiteFaq(id: ID!): WebsiteFaqType

  """Get a list of Single WebsiteFaq Items"""
  websiteFaqList(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, createdBy_Id: Float): WebsiteFaqTypeConnection

  """Get a Single Membership Payment Record"""
  membershipPayment(paymentId: ID!): MembershipPaymentType

  """Get a list of Membership Payment Records"""
  membershipPaymentList(orgId: ID!, userId: ID!, offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, user_Id: Float, membershipType: ID, paid: Boolean, paymentType: String, paymentApproval: Boolean): MembershipPaymentTypeConnection

  """Get all Website Banner Slider Image items"""
  websiteBannerSliderImages(domainName: String!, offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float): WebsiteBannerSliderImageTypeConnection

  """The ID of the object"""
  orgSubDivision(id: ID!): OrgSubDivisionType

  """Get all OrgSubDivision items"""
  orgSubDivisionList(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, subdivision: String, chairperson: String, phoneNumber: String, email: String, meetingDaysTime: String, meetingVenue: String, dateOfInauguration: Date, state: String, type: String): OrgSubDivisionTypeConnection

  """The ID of the object"""
  orgWebsite(id: ID!): WebsiteType

  """Get all Website Items"""
  websitesList(offset: Int, before: String, after: String, first: Int, last: Int, org: ID, event: ID, customDomain: String, subDomain: String): WebsiteTypeConnection
  website(domainName: String!): WebsiteType
  websiteAboutPage(domainName: String!): [String]
  websiteMembershipTypes(domainName: String!): [OrgMembershipType]

  """Get all Organization's Payment API"""
  websitePaymentApi(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, platform: String): OrganizationPaymentAPITypeConnection

  """The ID of the object"""
  organization(id: ID!): OrganizationType

  """Get all organization items"""
  organizationsList(offset: Int, before: String, after: String, first: Int, last: Int, name: String, abbrev: String, slug: String, myOrg_Approved: Boolean, myOrg_Blocked: Boolean, myOrg_User: ID): OrganizationTypeConnection

  """The ID of the object"""
  subdivision(id: ID!): OrgSubDivisionType

  """Get all subdivision items"""
  subdivisions(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, subdivision: String, chairperson: String, phoneNumber: String, email: String, meetingDaysTime: String, meetingVenue: String, dateOfInauguration: Date, state: String, type: String): OrgSubDivisionTypeConnection

  """The ID of the object"""
  specialty(id: ID!): SpecialtyType

  """Get all specialty items"""
  specialties(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, name: String): SpecialtyTypeConnection

  """The ID of the object"""
  subSpecialty(id: ID!): SubSpecialtyType

  """Get all sub_specialty items"""
  subSpecialties(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, specialty_Id: Float, name: String): SubSpecialtyTypeConnection
  organizations: [OrganizationType]

  """Get all organization a user belongs"""
  myOrganizations(offset: Int, before: String, after: String, first: Int, last: Int, name: String, abbrev: String, slug: String, myOrg_Approved: Boolean, myOrg_Blocked: Boolean, myOrg_User: ID): OrganizationTypeConnection

  """Get all the members of an Organization"""
  member(organizationId: ID!, userId: ID!): JoinRequestType

  """Get all the members of an Organization"""
  members(organizationId: Int!): [JoinRequestType]

  """Is this user a member of an Organization"""
  isOrgAdmin(organizationId: Int!): Boolean

  """The ID of the object"""
  publication(id: ID!): PublicationType

  """Get all Publications Items"""
  publicationsList(domainName: String!, offset: Int, before: String, after: String, first: Int, last: Int, id: Float, title: String, org_Id: Float, externalUpload: String, category_Id: Float): PublicationTypeConnection

  """The ID of the object"""
  publicationCategory(id: ID!): PublicationCategoryType

  """Get all PublicationCategoryType Items"""
  publicationCategoryList(domainName: String!, offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, name: String): PublicationCategoryTypeConnection

  """The ID of the object"""
  allOrganizationAnnouncement(id: ID!): AnnouncementType

  """Get all Org Announcement Items"""
  allOrganizationAnnouncementsList(offset: Int, before: String, after: String, first: Int, last: Int, title: String, body: String, announcementType: String): AnnouncementTypeConnection

  """Fetch all announcement in a specified organization"""
  allOrganizationAnnouncements(domainName: String!): [AnnouncementType]

  """Get all events in a specified organization"""
  allOrganizationEventsList(offset: Int, before: String, after: String, first: Int, last: Int, name: String, theme: String, venue: String, org_Slug: String, category_Name: String, category_Id: Float): MeetingTypeConnection

  """Get all events in a specified organization"""
  allOrganizationUpcomingEventList(offset: Int, before: String, after: String, first: Int, last: Int, name: String, theme: String, venue: String, org_Slug: String, category_Name: String, category_Id: Float): MeetingTypeConnection

  """Fetch all events in a specified organization"""
  allOrganizationEvents(domainName: String!): [MeetingType]

  """Fetch the three topmost events in a specified organization"""
  threeTopmostEvents(domainName: String!): [MeetingType]

  """Get the most recent or upcoming event in an organization"""
  orgConference(domainName: String!): MeetingType

  """Fetch all upcoming events in a specified organization"""
  allOrganizationUpcomingEvents(domainName: String!): [MeetingType]

  """Get the details of an event and related models using domain_name"""
  eventByDomainName(domainName: String!): MeetingType
  externalConferencePage(domainName: String): PageDataListType

  """Verify the Attendance Code for an Event"""
  verifyAttendanceCode(eventSlug: String!, eventCode: Int!): Boolean

  """The ID of the object"""
  schedule(id: ID!): ScheduleType

  """Get all Schedule Items"""
  schedulesList(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, location: String, title: String, description: String): ScheduleTypeConnection

  """Get a list of all the schedules for an event"""
  schedules(eventSlug: String): [ScheduleType]

  """Get a list of sorted schedules for an event"""
  sortedSchedules(eventSlug: String): String

  """The ID of the object"""
  presentation(id: ID!): PresentationType

  """Get all Presentation Items"""
  presentationsList(domainName: String!, offset: Int, before: String, after: String, first: Int, last: Int, title: String, meeting: ID, author: [ID], externalUpload: String): PresentationTypeConnection

  """Get a list of all presentations/publications in an organization"""
  websitePresentations(domainName: String!): [PresentationType]

  """Get a list of all presentations for an event"""
  presentations(eventSlug: String): [PresentationType]

  """The ID of the object"""
  presenter(id: ID!): PresenterType

  """Get all Presenter Items"""
  presentersList(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, person: ID, name: String, slug: String): PresenterTypeConnection

  """Get a list of all presenters for an event"""
  presenters(eventSlug: String): [PresenterType]

  """The ID of the object"""
  event(id: ID!): MeetingType

  """Get all Event items"""
  eventsList(offset: Int, before: String, after: String, first: Int, last: Int, name: String, theme: String, venue: String, org_Slug: String, category_Name: String, category_Id: Float): MeetingTypeConnection

  """The ID of the object"""
  eventCategory(id: ID!): MeetingCategoryType

  """Get all MeetingCategory items"""
  eventCategoryList(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, name: String): MeetingCategoryTypeConnection

  """The ID of the object"""
  eventTicket(id: ID!): TicketType

  """Get all Event Ticket items"""
  eventTicketList(offset: Int, before: String, after: String, first: Int, last: Int, name: String, meeting_Id: Float, org_Id: Float, earlyBirdFee: String, earlyBirdDeadline: Date, lateBirdFee: String): TicketTypeConnection

  """Get a list of all events/ meetings of an Organization"""
  events(orgSlug: String, name: String): [MeetingType]

  """
  Get a list of all upcoming events/ meetings of all Organizations I belong to
  """
  upcomingEvents(orgSlug: String): [MeetingType]

  """Get the details of an event"""
  eventById(id: Int!): MeetingType

  """Get the details of an event using the event slug"""
  eventBySlug(eventSlug: String): MeetingType

  """Get the List of announcements of organizations I belong to"""
  announcements(orgSlug: String): [AnnouncementType]

  """Get the details of an announcement"""
  announcement(id: Int!): AnnouncementType

  """Get all the members of an Organization to be checked in for this event"""
  eventCheckIn(orgId: Int!, eventId: Int!): [EventCheckInType]
  me: UserNode
  user: UserType

  """The ID of the object"""
  userRelay(id: ID!): UserNode

  """The ID of the object"""
  school(id: ID!): SchoolModelType

  """Get all school items"""
  schools(offset: Int, before: String, after: String, first: Int, last: Int, name: String, short: String, address: String): SchoolModelTypeConnection

  """The ID of the object"""
  department(id: ID!): DepartmentModelType

  """Get all department items"""
  departments(offset: Int, before: String, after: String, first: Int, last: Int, name: String): DepartmentModelTypeConnection

  """The ID of the object"""
  academicRecord(id: ID!): AcademicRecordModelType

  """Get all academic_record items"""
  academicRecords(offset: Int, before: String, after: String, first: Int, last: Int, program: String, user_Id: Float, school_Id: Float, discipline_Id: Float, admitted: Date, graduated: Date, current: Boolean): AcademicRecordModelTypeConnection

  """The ID of the object"""
  workExperience(id: ID!): WorkExperienceModelType

  """Get all work_experience items"""
  workExperiences(offset: Int, before: String, after: String, first: Int, last: Int, user_Id: Float, companyName: String, designation: String, startDate: Date, endDate: Date, current: Boolean, description: String, state: String, country: String): WorkExperienceModelTypeConnection

  """The ID of the object"""
  nextOfKin(id: ID!): NextOfKinModelType

  """Get all next of kin items"""
  nextOfKins(offset: Int, before: String, after: String, first: Int, last: Int, user_Id: Float, firstName: String, lastName: String, middleName: String, email: String, phone: String, relationship: String): NextOfKinModelTypeConnection

  """Get Logged in user REST Token"""
  getRestToken: String
  _debug: DjangoDebug
}

type PotentialClientType {
  """"""
  id: ID!

  """"""
  fullname: String!

  """"""
  email: String!

  """"""
  phonenumber: String!

  """"""
  organization: String!
}

"""The Notification model"""
type NotificationType {
  """"""
  id: ID!

  """"""
  user: UserType

  """"""
  subject: String

  """"""
  sms: String

  """"""
  email: String

  """"""
  push: String

  """"""
  createdAt: DateTime!

  """"""
  updatedAt: DateTime!

  """"""
  read: Boolean!
}

"""The User model"""
type UserType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  lastLogin: DateTime

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!

  """"""
  firstName: String!

  """"""
  lastName: String!

  """"""
  email: String!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!

  """"""
  dateJoined: DateTime!

  """"""
  middleName: String!

  """Write in international phone no format (+234 or +41)"""
  phone: String

  """Enter birthday in YYYY-MM-DD format """
  dob: Date

  """Indicates if a new user has confirmed email"""
  confirmedEmail: Boolean

  """Indicates if a new user has confirmed phone number"""
  confirmedPhone: Boolean

  """"""
  bio: String

  """Upload size of photo should be a maximum of 2mb"""
  photo: String

  """"""
  qrCodeFile: String

  """"""
  socialAuthPhotoUrl: String

  """"""
  gender: AccountsUserGenderChoices

  """"""
  address: String

  """"""
  postal: String

  """"""
  timezone: AccountsUserTimezoneChoices!

  """"""
  state: AccountsUserStateChoices

  """"""
  country: AccountsUserCountryChoices!

  """"""
  nationality: AccountsUserNationalityChoices!

  """"""
  kinsman(offset: Int, before: String, after: String, first: Int, last: Int, user_Id: Float, firstName: String, lastName: String, middleName: String, email: String, phone: String, relationship: String): NextOfKinModelTypeConnection!

  """"""
  records(offset: Int, before: String, after: String, first: Int, last: Int, program: String, user_Id: Float, school_Id: Float, discipline_Id: Float, admitted: Date, graduated: Date, current: Boolean): AcademicRecordModelTypeConnection!

  """"""
  workexperienceSet(offset: Int, before: String, after: String, first: Int, last: Int, user_Id: Float, companyName: String, designation: String, startDate: Date, endDate: Date, current: Boolean, description: String, state: String, country: String): WorkExperienceModelTypeConnection!

  """"""
  creator(offset: Int, before: String, after: String, first: Int, last: Int, name: String, abbrev: String, slug: String, myOrg_Approved: Boolean, myOrg_Blocked: Boolean, myOrg_User: ID): OrganizationTypeConnection!

  """"""
  orgCreator(offset: Int, before: String, after: String, first: Int, last: Int, organization: ID, creator: ID, user: ID): OrgAdminTypeConnection!

  """"""
  orgAdmins(offset: Int, before: String, after: String, first: Int, last: Int, organization: ID, creator: ID, user: ID): OrgAdminTypeConnection!

  """"""
  orgadmininvitationSet(offset: Int, before: String, after: String, first: Int, last: Int, organization: ID): OrgAdminInvitationTypeConnection!

  """"""
  organizationmembershiptypeSet: [OrgMembershipType!]!

  """"""
  membersMembershippayments(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, user_Id: Float, membershipType: ID, paid: Boolean, paymentType: String, paymentApproval: Boolean): MembershipPaymentTypeConnection!

  """The User that wants to join the organization"""
  member(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, user_Id: Float, subdivision_Id: Float, newOrOld: String, orgNumber: String, verified: Boolean, approved: Boolean): JoinRequestTypeConnection!

  """
  The Admin that approved - if joining with Organization is not automatic
  """
  acceptor(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, user_Id: Float, subdivision_Id: Float, newOrOld: String, orgNumber: String, verified: Boolean, approved: Boolean): JoinRequestTypeConnection!

  """The Admin that blocked the person"""
  blocker(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, user_Id: Float, subdivision_Id: Float, newOrOld: String, orgNumber: String, verified: Boolean, approved: Boolean): JoinRequestTypeConnection!

  """"""
  importcontactSet(offset: Int, before: String, after: String, first: Int, last: Int, organization: ID, firstName: String, lastName: String, used: Boolean): MemberInvitationTypeConnection!

  """"""
  faqCreator(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, createdBy_Id: Float): WebsiteFaqTypeConnection!

  """"""
  meetingSet(offset: Int, before: String, after: String, first: Int, last: Int, name: String, theme: String, venue: String, org_Slug: String, category_Name: String, category_Id: Float): MeetingTypeConnection!

  """"""
  ticketSet(offset: Int, before: String, after: String, first: Int, last: Int, name: String, meeting_Id: Float, org_Id: Float, earlyBirdFee: String, earlyBirdDeadline: Date, lateBirdFee: String): TicketTypeConnection!

  """"""
  conferencePayments(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, ticket: ID, paid: Boolean, paymentType: String, paymentApproval: Boolean): PaymentTypeConnection!

  """"""
  attendanceSet(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, present: Boolean, excuse: String, interested: Boolean): AttendanceTypeConnection!

  """"""
  approveAdmin(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, present: Boolean, excuse: String, interested: Boolean): AttendanceTypeConnection!

  """"""
  presenterPerson(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, person: ID, name: String, slug: String): PresenterTypeConnection!

  """"""
  presentationCreator(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, person: ID, name: String, slug: String): PresenterTypeConnection!

  """"""
  presentationSet(offset: Int, before: String, after: String, first: Int, last: Int, title: String, meeting: ID, author: [ID], externalUpload: String): PresentationTypeConnection!

  """"""
  publicationSet(offset: Int, before: String, after: String, first: Int, last: Int, id: Float, title: String, org_Id: Float, externalUpload: String, category_Id: Float): PublicationTypeConnection!

  """"""
  announcementSet(offset: Int, before: String, after: String, first: Int, last: Int, title: String, body: String, announcementType: String): AnnouncementTypeConnection!

  """"""
  feedbackSet(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, respondent: ID): FeedbackTypeConnection!

  """"""
  howdidyouhearaboutusSet(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, organization: ID, respondent: ID): HowDidYouHearAboutUsTypeConnection!

  """"""
  memberUsers(offset: Int, before: String, after: String, first: Int, last: Int, user_Id: Float, event_Id: Float, ticket_Id: Float, organization_Id: Float): ConferenceRegistrationTypeConnection!
  notificationSetting: UserSettingType

  """"""
  sender: [NotificationType!]!
  pk: ID!
  photoUrl: String
  qrCode: String
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""An enumeration."""
enum AccountsUserGenderChoices {
  """Male"""
  MALE

  """Female"""
  FEMALE
}

"""An enumeration."""
enum AccountsUserTimezoneChoices {
  """Africa/Abidjan"""
  AFRICA_ABIDJAN

  """Africa/Accra"""
  AFRICA_ACCRA

  """Africa/Addis_Ababa"""
  AFRICA_ADDIS_ABABA

  """Africa/Algiers"""
  AFRICA_ALGIERS

  """Africa/Asmara"""
  AFRICA_ASMARA

  """Africa/Bamako"""
  AFRICA_BAMAKO

  """Africa/Bangui"""
  AFRICA_BANGUI

  """Africa/Banjul"""
  AFRICA_BANJUL

  """Africa/Bissau"""
  AFRICA_BISSAU

  """Africa/Blantyre"""
  AFRICA_BLANTYRE

  """Africa/Brazzaville"""
  AFRICA_BRAZZAVILLE

  """Africa/Bujumbura"""
  AFRICA_BUJUMBURA

  """Africa/Cairo"""
  AFRICA_CAIRO

  """Africa/Casablanca"""
  AFRICA_CASABLANCA

  """Africa/Ceuta"""
  AFRICA_CEUTA

  """Africa/Conakry"""
  AFRICA_CONAKRY

  """Africa/Dakar"""
  AFRICA_DAKAR

  """Africa/Dar_es_Salaam"""
  AFRICA_DAR_ES_SALAAM

  """Africa/Djibouti"""
  AFRICA_DJIBOUTI

  """Africa/Douala"""
  AFRICA_DOUALA

  """Africa/El_Aaiun"""
  AFRICA_EL_AAIUN

  """Africa/Freetown"""
  AFRICA_FREETOWN

  """Africa/Gaborone"""
  AFRICA_GABORONE

  """Africa/Harare"""
  AFRICA_HARARE

  """Africa/Johannesburg"""
  AFRICA_JOHANNESBURG

  """Africa/Juba"""
  AFRICA_JUBA

  """Africa/Kampala"""
  AFRICA_KAMPALA

  """Africa/Khartoum"""
  AFRICA_KHARTOUM

  """Africa/Kigali"""
  AFRICA_KIGALI

  """Africa/Kinshasa"""
  AFRICA_KINSHASA

  """Africa/Lagos"""
  AFRICA_LAGOS

  """Africa/Libreville"""
  AFRICA_LIBREVILLE

  """Africa/Lome"""
  AFRICA_LOME

  """Africa/Luanda"""
  AFRICA_LUANDA

  """Africa/Lubumbashi"""
  AFRICA_LUBUMBASHI

  """Africa/Lusaka"""
  AFRICA_LUSAKA

  """Africa/Malabo"""
  AFRICA_MALABO

  """Africa/Maputo"""
  AFRICA_MAPUTO

  """Africa/Maseru"""
  AFRICA_MASERU

  """Africa/Mbabane"""
  AFRICA_MBABANE

  """Africa/Mogadishu"""
  AFRICA_MOGADISHU

  """Africa/Monrovia"""
  AFRICA_MONROVIA

  """Africa/Nairobi"""
  AFRICA_NAIROBI

  """Africa/Ndjamena"""
  AFRICA_NDJAMENA

  """Africa/Niamey"""
  AFRICA_NIAMEY

  """Africa/Nouakchott"""
  AFRICA_NOUAKCHOTT

  """Africa/Ouagadougou"""
  AFRICA_OUAGADOUGOU

  """Africa/Porto-Novo"""
  AFRICA_PORTO_NOVO

  """Africa/Sao_Tome"""
  AFRICA_SAO_TOME

  """Africa/Tripoli"""
  AFRICA_TRIPOLI

  """Africa/Tunis"""
  AFRICA_TUNIS

  """Africa/Windhoek"""
  AFRICA_WINDHOEK

  """America/Adak"""
  AMERICA_ADAK

  """America/Anchorage"""
  AMERICA_ANCHORAGE

  """America/Anguilla"""
  AMERICA_ANGUILLA

  """America/Antigua"""
  AMERICA_ANTIGUA

  """America/Araguaina"""
  AMERICA_ARAGUAINA

  """America/Argentina/Buenos_Aires"""
  AMERICA_ARGENTINA_BUENOS_AIRES

  """America/Argentina/Catamarca"""
  AMERICA_ARGENTINA_CATAMARCA

  """America/Argentina/Cordoba"""
  AMERICA_ARGENTINA_CORDOBA

  """America/Argentina/Jujuy"""
  AMERICA_ARGENTINA_JUJUY

  """America/Argentina/La_Rioja"""
  AMERICA_ARGENTINA_LA_RIOJA

  """America/Argentina/Mendoza"""
  AMERICA_ARGENTINA_MENDOZA

  """America/Argentina/Rio_Gallegos"""
  AMERICA_ARGENTINA_RIO_GALLEGOS

  """America/Argentina/Salta"""
  AMERICA_ARGENTINA_SALTA

  """America/Argentina/San_Juan"""
  AMERICA_ARGENTINA_SAN_JUAN

  """America/Argentina/San_Luis"""
  AMERICA_ARGENTINA_SAN_LUIS

  """America/Argentina/Tucuman"""
  AMERICA_ARGENTINA_TUCUMAN

  """America/Argentina/Ushuaia"""
  AMERICA_ARGENTINA_USHUAIA

  """America/Aruba"""
  AMERICA_ARUBA

  """America/Asuncion"""
  AMERICA_ASUNCION

  """America/Atikokan"""
  AMERICA_ATIKOKAN

  """America/Bahia"""
  AMERICA_BAHIA

  """America/Bahia_Banderas"""
  AMERICA_BAHIA_BANDERAS

  """America/Barbados"""
  AMERICA_BARBADOS

  """America/Belem"""
  AMERICA_BELEM

  """America/Belize"""
  AMERICA_BELIZE

  """America/Blanc-Sablon"""
  AMERICA_BLANC_SABLON

  """America/Boa_Vista"""
  AMERICA_BOA_VISTA

  """America/Bogota"""
  AMERICA_BOGOTA

  """America/Boise"""
  AMERICA_BOISE

  """America/Cambridge_Bay"""
  AMERICA_CAMBRIDGE_BAY

  """America/Campo_Grande"""
  AMERICA_CAMPO_GRANDE

  """America/Cancun"""
  AMERICA_CANCUN

  """America/Caracas"""
  AMERICA_CARACAS

  """America/Cayenne"""
  AMERICA_CAYENNE

  """America/Cayman"""
  AMERICA_CAYMAN

  """America/Chicago"""
  AMERICA_CHICAGO

  """America/Chihuahua"""
  AMERICA_CHIHUAHUA

  """America/Costa_Rica"""
  AMERICA_COSTA_RICA

  """America/Creston"""
  AMERICA_CRESTON

  """America/Cuiaba"""
  AMERICA_CUIABA

  """America/Curacao"""
  AMERICA_CURACAO

  """America/Danmarkshavn"""
  AMERICA_DANMARKSHAVN

  """America/Dawson"""
  AMERICA_DAWSON

  """America/Dawson_Creek"""
  AMERICA_DAWSON_CREEK

  """America/Denver"""
  AMERICA_DENVER

  """America/Detroit"""
  AMERICA_DETROIT

  """America/Dominica"""
  AMERICA_DOMINICA

  """America/Edmonton"""
  AMERICA_EDMONTON

  """America/Eirunepe"""
  AMERICA_EIRUNEPE

  """America/El_Salvador"""
  AMERICA_EL_SALVADOR

  """America/Fort_Nelson"""
  AMERICA_FORT_NELSON

  """America/Fortaleza"""
  AMERICA_FORTALEZA

  """America/Glace_Bay"""
  AMERICA_GLACE_BAY

  """America/Goose_Bay"""
  AMERICA_GOOSE_BAY

  """America/Grand_Turk"""
  AMERICA_GRAND_TURK

  """America/Grenada"""
  AMERICA_GRENADA

  """America/Guadeloupe"""
  AMERICA_GUADELOUPE

  """America/Guatemala"""
  AMERICA_GUATEMALA

  """America/Guayaquil"""
  AMERICA_GUAYAQUIL

  """America/Guyana"""
  AMERICA_GUYANA

  """America/Halifax"""
  AMERICA_HALIFAX

  """America/Havana"""
  AMERICA_HAVANA

  """America/Hermosillo"""
  AMERICA_HERMOSILLO

  """America/Indiana/Indianapolis"""
  AMERICA_INDIANA_INDIANAPOLIS

  """America/Indiana/Knox"""
  AMERICA_INDIANA_KNOX

  """America/Indiana/Marengo"""
  AMERICA_INDIANA_MARENGO

  """America/Indiana/Petersburg"""
  AMERICA_INDIANA_PETERSBURG

  """America/Indiana/Tell_City"""
  AMERICA_INDIANA_TELL_CITY

  """America/Indiana/Vevay"""
  AMERICA_INDIANA_VEVAY

  """America/Indiana/Vincennes"""
  AMERICA_INDIANA_VINCENNES

  """America/Indiana/Winamac"""
  AMERICA_INDIANA_WINAMAC

  """America/Inuvik"""
  AMERICA_INUVIK

  """America/Iqaluit"""
  AMERICA_IQALUIT

  """America/Jamaica"""
  AMERICA_JAMAICA

  """America/Juneau"""
  AMERICA_JUNEAU

  """America/Kentucky/Louisville"""
  AMERICA_KENTUCKY_LOUISVILLE

  """America/Kentucky/Monticello"""
  AMERICA_KENTUCKY_MONTICELLO

  """America/Kralendijk"""
  AMERICA_KRALENDIJK

  """America/La_Paz"""
  AMERICA_LA_PAZ

  """America/Lima"""
  AMERICA_LIMA

  """America/Los_Angeles"""
  AMERICA_LOS_ANGELES

  """America/Lower_Princes"""
  AMERICA_LOWER_PRINCES

  """America/Maceio"""
  AMERICA_MACEIO

  """America/Managua"""
  AMERICA_MANAGUA

  """America/Manaus"""
  AMERICA_MANAUS

  """America/Marigot"""
  AMERICA_MARIGOT

  """America/Martinique"""
  AMERICA_MARTINIQUE

  """America/Matamoros"""
  AMERICA_MATAMOROS

  """America/Mazatlan"""
  AMERICA_MAZATLAN

  """America/Menominee"""
  AMERICA_MENOMINEE

  """America/Merida"""
  AMERICA_MERIDA

  """America/Metlakatla"""
  AMERICA_METLAKATLA

  """America/Mexico_City"""
  AMERICA_MEXICO_CITY

  """America/Miquelon"""
  AMERICA_MIQUELON

  """America/Moncton"""
  AMERICA_MONCTON

  """America/Monterrey"""
  AMERICA_MONTERREY

  """America/Montevideo"""
  AMERICA_MONTEVIDEO

  """America/Montserrat"""
  AMERICA_MONTSERRAT

  """America/Nassau"""
  AMERICA_NASSAU

  """America/New_York"""
  AMERICA_NEW_YORK

  """America/Nipigon"""
  AMERICA_NIPIGON

  """America/Nome"""
  AMERICA_NOME

  """America/Noronha"""
  AMERICA_NORONHA

  """America/North_Dakota/Beulah"""
  AMERICA_NORTH_DAKOTA_BEULAH

  """America/North_Dakota/Center"""
  AMERICA_NORTH_DAKOTA_CENTER

  """America/North_Dakota/New_Salem"""
  AMERICA_NORTH_DAKOTA_NEW_SALEM

  """America/Nuuk"""
  AMERICA_NUUK

  """America/Ojinaga"""
  AMERICA_OJINAGA

  """America/Panama"""
  AMERICA_PANAMA

  """America/Pangnirtung"""
  AMERICA_PANGNIRTUNG

  """America/Paramaribo"""
  AMERICA_PARAMARIBO

  """America/Phoenix"""
  AMERICA_PHOENIX

  """America/Port-au-Prince"""
  AMERICA_PORT_AU_PRINCE

  """America/Port_of_Spain"""
  AMERICA_PORT_OF_SPAIN

  """America/Porto_Velho"""
  AMERICA_PORTO_VELHO

  """America/Puerto_Rico"""
  AMERICA_PUERTO_RICO

  """America/Punta_Arenas"""
  AMERICA_PUNTA_ARENAS

  """America/Rainy_River"""
  AMERICA_RAINY_RIVER

  """America/Rankin_Inlet"""
  AMERICA_RANKIN_INLET

  """America/Recife"""
  AMERICA_RECIFE

  """America/Regina"""
  AMERICA_REGINA

  """America/Resolute"""
  AMERICA_RESOLUTE

  """America/Rio_Branco"""
  AMERICA_RIO_BRANCO

  """America/Santarem"""
  AMERICA_SANTAREM

  """America/Santiago"""
  AMERICA_SANTIAGO

  """America/Santo_Domingo"""
  AMERICA_SANTO_DOMINGO

  """America/Sao_Paulo"""
  AMERICA_SAO_PAULO

  """America/Scoresbysund"""
  AMERICA_SCORESBYSUND

  """America/Sitka"""
  AMERICA_SITKA

  """America/St_Barthelemy"""
  AMERICA_ST_BARTHELEMY

  """America/St_Johns"""
  AMERICA_ST_JOHNS

  """America/St_Kitts"""
  AMERICA_ST_KITTS

  """America/St_Lucia"""
  AMERICA_ST_LUCIA

  """America/St_Thomas"""
  AMERICA_ST_THOMAS

  """America/St_Vincent"""
  AMERICA_ST_VINCENT

  """America/Swift_Current"""
  AMERICA_SWIFT_CURRENT

  """America/Tegucigalpa"""
  AMERICA_TEGUCIGALPA

  """America/Thule"""
  AMERICA_THULE

  """America/Thunder_Bay"""
  AMERICA_THUNDER_BAY

  """America/Tijuana"""
  AMERICA_TIJUANA

  """America/Toronto"""
  AMERICA_TORONTO

  """America/Tortola"""
  AMERICA_TORTOLA

  """America/Vancouver"""
  AMERICA_VANCOUVER

  """America/Whitehorse"""
  AMERICA_WHITEHORSE

  """America/Winnipeg"""
  AMERICA_WINNIPEG

  """America/Yakutat"""
  AMERICA_YAKUTAT

  """America/Yellowknife"""
  AMERICA_YELLOWKNIFE

  """Antarctica/Casey"""
  ANTARCTICA_CASEY

  """Antarctica/Davis"""
  ANTARCTICA_DAVIS

  """Antarctica/DumontDUrville"""
  ANTARCTICA_DUMONTDURVILLE

  """Antarctica/Macquarie"""
  ANTARCTICA_MACQUARIE

  """Antarctica/Mawson"""
  ANTARCTICA_MAWSON

  """Antarctica/McMurdo"""
  ANTARCTICA_MCMURDO

  """Antarctica/Palmer"""
  ANTARCTICA_PALMER

  """Antarctica/Rothera"""
  ANTARCTICA_ROTHERA

  """Antarctica/Syowa"""
  ANTARCTICA_SYOWA

  """Antarctica/Troll"""
  ANTARCTICA_TROLL

  """Antarctica/Vostok"""
  ANTARCTICA_VOSTOK

  """Arctic/Longyearbyen"""
  ARCTIC_LONGYEARBYEN

  """Asia/Aden"""
  ASIA_ADEN

  """Asia/Almaty"""
  ASIA_ALMATY

  """Asia/Amman"""
  ASIA_AMMAN

  """Asia/Anadyr"""
  ASIA_ANADYR

  """Asia/Aqtau"""
  ASIA_AQTAU

  """Asia/Aqtobe"""
  ASIA_AQTOBE

  """Asia/Ashgabat"""
  ASIA_ASHGABAT

  """Asia/Atyrau"""
  ASIA_ATYRAU

  """Asia/Baghdad"""
  ASIA_BAGHDAD

  """Asia/Bahrain"""
  ASIA_BAHRAIN

  """Asia/Baku"""
  ASIA_BAKU

  """Asia/Bangkok"""
  ASIA_BANGKOK

  """Asia/Barnaul"""
  ASIA_BARNAUL

  """Asia/Beirut"""
  ASIA_BEIRUT

  """Asia/Bishkek"""
  ASIA_BISHKEK

  """Asia/Brunei"""
  ASIA_BRUNEI

  """Asia/Chita"""
  ASIA_CHITA

  """Asia/Choibalsan"""
  ASIA_CHOIBALSAN

  """Asia/Colombo"""
  ASIA_COLOMBO

  """Asia/Damascus"""
  ASIA_DAMASCUS

  """Asia/Dhaka"""
  ASIA_DHAKA

  """Asia/Dili"""
  ASIA_DILI

  """Asia/Dubai"""
  ASIA_DUBAI

  """Asia/Dushanbe"""
  ASIA_DUSHANBE

  """Asia/Famagusta"""
  ASIA_FAMAGUSTA

  """Asia/Gaza"""
  ASIA_GAZA

  """Asia/Hebron"""
  ASIA_HEBRON

  """Asia/Ho_Chi_Minh"""
  ASIA_HO_CHI_MINH

  """Asia/Hong_Kong"""
  ASIA_HONG_KONG

  """Asia/Hovd"""
  ASIA_HOVD

  """Asia/Irkutsk"""
  ASIA_IRKUTSK

  """Asia/Jakarta"""
  ASIA_JAKARTA

  """Asia/Jayapura"""
  ASIA_JAYAPURA

  """Asia/Jerusalem"""
  ASIA_JERUSALEM

  """Asia/Kabul"""
  ASIA_KABUL

  """Asia/Kamchatka"""
  ASIA_KAMCHATKA

  """Asia/Karachi"""
  ASIA_KARACHI

  """Asia/Kathmandu"""
  ASIA_KATHMANDU

  """Asia/Khandyga"""
  ASIA_KHANDYGA

  """Asia/Kolkata"""
  ASIA_KOLKATA

  """Asia/Krasnoyarsk"""
  ASIA_KRASNOYARSK

  """Asia/Kuala_Lumpur"""
  ASIA_KUALA_LUMPUR

  """Asia/Kuching"""
  ASIA_KUCHING

  """Asia/Kuwait"""
  ASIA_KUWAIT

  """Asia/Macau"""
  ASIA_MACAU

  """Asia/Magadan"""
  ASIA_MAGADAN

  """Asia/Makassar"""
  ASIA_MAKASSAR

  """Asia/Manila"""
  ASIA_MANILA

  """Asia/Muscat"""
  ASIA_MUSCAT

  """Asia/Nicosia"""
  ASIA_NICOSIA

  """Asia/Novokuznetsk"""
  ASIA_NOVOKUZNETSK

  """Asia/Novosibirsk"""
  ASIA_NOVOSIBIRSK

  """Asia/Omsk"""
  ASIA_OMSK

  """Asia/Oral"""
  ASIA_ORAL

  """Asia/Phnom_Penh"""
  ASIA_PHNOM_PENH

  """Asia/Pontianak"""
  ASIA_PONTIANAK

  """Asia/Pyongyang"""
  ASIA_PYONGYANG

  """Asia/Qatar"""
  ASIA_QATAR

  """Asia/Qostanay"""
  ASIA_QOSTANAY

  """Asia/Qyzylorda"""
  ASIA_QYZYLORDA

  """Asia/Riyadh"""
  ASIA_RIYADH

  """Asia/Sakhalin"""
  ASIA_SAKHALIN

  """Asia/Samarkand"""
  ASIA_SAMARKAND

  """Asia/Seoul"""
  ASIA_SEOUL

  """Asia/Shanghai"""
  ASIA_SHANGHAI

  """Asia/Singapore"""
  ASIA_SINGAPORE

  """Asia/Srednekolymsk"""
  ASIA_SREDNEKOLYMSK

  """Asia/Taipei"""
  ASIA_TAIPEI

  """Asia/Tashkent"""
  ASIA_TASHKENT

  """Asia/Tbilisi"""
  ASIA_TBILISI

  """Asia/Tehran"""
  ASIA_TEHRAN

  """Asia/Thimphu"""
  ASIA_THIMPHU

  """Asia/Tokyo"""
  ASIA_TOKYO

  """Asia/Tomsk"""
  ASIA_TOMSK

  """Asia/Ulaanbaatar"""
  ASIA_ULAANBAATAR

  """Asia/Urumqi"""
  ASIA_URUMQI

  """Asia/Ust-Nera"""
  ASIA_UST_NERA

  """Asia/Vientiane"""
  ASIA_VIENTIANE

  """Asia/Vladivostok"""
  ASIA_VLADIVOSTOK

  """Asia/Yakutsk"""
  ASIA_YAKUTSK

  """Asia/Yangon"""
  ASIA_YANGON

  """Asia/Yekaterinburg"""
  ASIA_YEKATERINBURG

  """Asia/Yerevan"""
  ASIA_YEREVAN

  """Atlantic/Azores"""
  ATLANTIC_AZORES

  """Atlantic/Bermuda"""
  ATLANTIC_BERMUDA

  """Atlantic/Canary"""
  ATLANTIC_CANARY

  """Atlantic/Cape_Verde"""
  ATLANTIC_CAPE_VERDE

  """Atlantic/Faroe"""
  ATLANTIC_FAROE

  """Atlantic/Madeira"""
  ATLANTIC_MADEIRA

  """Atlantic/Reykjavik"""
  ATLANTIC_REYKJAVIK

  """Atlantic/South_Georgia"""
  ATLANTIC_SOUTH_GEORGIA

  """Atlantic/St_Helena"""
  ATLANTIC_ST_HELENA

  """Atlantic/Stanley"""
  ATLANTIC_STANLEY

  """Australia/Adelaide"""
  AUSTRALIA_ADELAIDE

  """Australia/Brisbane"""
  AUSTRALIA_BRISBANE

  """Australia/Broken_Hill"""
  AUSTRALIA_BROKEN_HILL

  """Australia/Currie"""
  AUSTRALIA_CURRIE

  """Australia/Darwin"""
  AUSTRALIA_DARWIN

  """Australia/Eucla"""
  AUSTRALIA_EUCLA

  """Australia/Hobart"""
  AUSTRALIA_HOBART

  """Australia/Lindeman"""
  AUSTRALIA_LINDEMAN

  """Australia/Lord_Howe"""
  AUSTRALIA_LORD_HOWE

  """Australia/Melbourne"""
  AUSTRALIA_MELBOURNE

  """Australia/Perth"""
  AUSTRALIA_PERTH

  """Australia/Sydney"""
  AUSTRALIA_SYDNEY

  """Canada/Atlantic"""
  CANADA_ATLANTIC

  """Canada/Central"""
  CANADA_CENTRAL

  """Canada/Eastern"""
  CANADA_EASTERN

  """Canada/Mountain"""
  CANADA_MOUNTAIN

  """Canada/Newfoundland"""
  CANADA_NEWFOUNDLAND

  """Canada/Pacific"""
  CANADA_PACIFIC

  """Europe/Amsterdam"""
  EUROPE_AMSTERDAM

  """Europe/Andorra"""
  EUROPE_ANDORRA

  """Europe/Astrakhan"""
  EUROPE_ASTRAKHAN

  """Europe/Athens"""
  EUROPE_ATHENS

  """Europe/Belgrade"""
  EUROPE_BELGRADE

  """Europe/Berlin"""
  EUROPE_BERLIN

  """Europe/Bratislava"""
  EUROPE_BRATISLAVA

  """Europe/Brussels"""
  EUROPE_BRUSSELS

  """Europe/Bucharest"""
  EUROPE_BUCHAREST

  """Europe/Budapest"""
  EUROPE_BUDAPEST

  """Europe/Busingen"""
  EUROPE_BUSINGEN

  """Europe/Chisinau"""
  EUROPE_CHISINAU

  """Europe/Copenhagen"""
  EUROPE_COPENHAGEN

  """Europe/Dublin"""
  EUROPE_DUBLIN

  """Europe/Gibraltar"""
  EUROPE_GIBRALTAR

  """Europe/Guernsey"""
  EUROPE_GUERNSEY

  """Europe/Helsinki"""
  EUROPE_HELSINKI

  """Europe/Isle_of_Man"""
  EUROPE_ISLE_OF_MAN

  """Europe/Istanbul"""
  EUROPE_ISTANBUL

  """Europe/Jersey"""
  EUROPE_JERSEY

  """Europe/Kaliningrad"""
  EUROPE_KALININGRAD

  """Europe/Kiev"""
  EUROPE_KIEV

  """Europe/Kirov"""
  EUROPE_KIROV

  """Europe/Lisbon"""
  EUROPE_LISBON

  """Europe/Ljubljana"""
  EUROPE_LJUBLJANA

  """Europe/London"""
  EUROPE_LONDON

  """Europe/Luxembourg"""
  EUROPE_LUXEMBOURG

  """Europe/Madrid"""
  EUROPE_MADRID

  """Europe/Malta"""
  EUROPE_MALTA

  """Europe/Mariehamn"""
  EUROPE_MARIEHAMN

  """Europe/Minsk"""
  EUROPE_MINSK

  """Europe/Monaco"""
  EUROPE_MONACO

  """Europe/Moscow"""
  EUROPE_MOSCOW

  """Europe/Oslo"""
  EUROPE_OSLO

  """Europe/Paris"""
  EUROPE_PARIS

  """Europe/Podgorica"""
  EUROPE_PODGORICA

  """Europe/Prague"""
  EUROPE_PRAGUE

  """Europe/Riga"""
  EUROPE_RIGA

  """Europe/Rome"""
  EUROPE_ROME

  """Europe/Samara"""
  EUROPE_SAMARA

  """Europe/San_Marino"""
  EUROPE_SAN_MARINO

  """Europe/Sarajevo"""
  EUROPE_SARAJEVO

  """Europe/Saratov"""
  EUROPE_SARATOV

  """Europe/Simferopol"""
  EUROPE_SIMFEROPOL

  """Europe/Skopje"""
  EUROPE_SKOPJE

  """Europe/Sofia"""
  EUROPE_SOFIA

  """Europe/Stockholm"""
  EUROPE_STOCKHOLM

  """Europe/Tallinn"""
  EUROPE_TALLINN

  """Europe/Tirane"""
  EUROPE_TIRANE

  """Europe/Ulyanovsk"""
  EUROPE_ULYANOVSK

  """Europe/Uzhgorod"""
  EUROPE_UZHGOROD

  """Europe/Vaduz"""
  EUROPE_VADUZ

  """Europe/Vatican"""
  EUROPE_VATICAN

  """Europe/Vienna"""
  EUROPE_VIENNA

  """Europe/Vilnius"""
  EUROPE_VILNIUS

  """Europe/Volgograd"""
  EUROPE_VOLGOGRAD

  """Europe/Warsaw"""
  EUROPE_WARSAW

  """Europe/Zagreb"""
  EUROPE_ZAGREB

  """Europe/Zaporozhye"""
  EUROPE_ZAPOROZHYE

  """Europe/Zurich"""
  EUROPE_ZURICH

  """GMT"""
  GMT

  """Indian/Antananarivo"""
  INDIAN_ANTANANARIVO

  """Indian/Chagos"""
  INDIAN_CHAGOS

  """Indian/Christmas"""
  INDIAN_CHRISTMAS

  """Indian/Cocos"""
  INDIAN_COCOS

  """Indian/Comoro"""
  INDIAN_COMORO

  """Indian/Kerguelen"""
  INDIAN_KERGUELEN

  """Indian/Mahe"""
  INDIAN_MAHE

  """Indian/Maldives"""
  INDIAN_MALDIVES

  """Indian/Mauritius"""
  INDIAN_MAURITIUS

  """Indian/Mayotte"""
  INDIAN_MAYOTTE

  """Indian/Reunion"""
  INDIAN_REUNION

  """Pacific/Apia"""
  PACIFIC_APIA

  """Pacific/Auckland"""
  PACIFIC_AUCKLAND

  """Pacific/Bougainville"""
  PACIFIC_BOUGAINVILLE

  """Pacific/Chatham"""
  PACIFIC_CHATHAM

  """Pacific/Chuuk"""
  PACIFIC_CHUUK

  """Pacific/Easter"""
  PACIFIC_EASTER

  """Pacific/Efate"""
  PACIFIC_EFATE

  """Pacific/Enderbury"""
  PACIFIC_ENDERBURY

  """Pacific/Fakaofo"""
  PACIFIC_FAKAOFO

  """Pacific/Fiji"""
  PACIFIC_FIJI

  """Pacific/Funafuti"""
  PACIFIC_FUNAFUTI

  """Pacific/Galapagos"""
  PACIFIC_GALAPAGOS

  """Pacific/Gambier"""
  PACIFIC_GAMBIER

  """Pacific/Guadalcanal"""
  PACIFIC_GUADALCANAL

  """Pacific/Guam"""
  PACIFIC_GUAM

  """Pacific/Honolulu"""
  PACIFIC_HONOLULU

  """Pacific/Kiritimati"""
  PACIFIC_KIRITIMATI

  """Pacific/Kosrae"""
  PACIFIC_KOSRAE

  """Pacific/Kwajalein"""
  PACIFIC_KWAJALEIN

  """Pacific/Majuro"""
  PACIFIC_MAJURO

  """Pacific/Marquesas"""
  PACIFIC_MARQUESAS

  """Pacific/Midway"""
  PACIFIC_MIDWAY

  """Pacific/Nauru"""
  PACIFIC_NAURU

  """Pacific/Niue"""
  PACIFIC_NIUE

  """Pacific/Norfolk"""
  PACIFIC_NORFOLK

  """Pacific/Noumea"""
  PACIFIC_NOUMEA

  """Pacific/Pago_Pago"""
  PACIFIC_PAGO_PAGO

  """Pacific/Palau"""
  PACIFIC_PALAU

  """Pacific/Pitcairn"""
  PACIFIC_PITCAIRN

  """Pacific/Pohnpei"""
  PACIFIC_POHNPEI

  """Pacific/Port_Moresby"""
  PACIFIC_PORT_MORESBY

  """Pacific/Rarotonga"""
  PACIFIC_RAROTONGA

  """Pacific/Saipan"""
  PACIFIC_SAIPAN

  """Pacific/Tahiti"""
  PACIFIC_TAHITI

  """Pacific/Tarawa"""
  PACIFIC_TARAWA

  """Pacific/Tongatapu"""
  PACIFIC_TONGATAPU

  """Pacific/Wake"""
  PACIFIC_WAKE

  """Pacific/Wallis"""
  PACIFIC_WALLIS

  """US/Alaska"""
  US_ALASKA

  """US/Arizona"""
  US_ARIZONA

  """US/Central"""
  US_CENTRAL

  """US/Eastern"""
  US_EASTERN

  """US/Hawaii"""
  US_HAWAII

  """US/Mountain"""
  US_MOUNTAIN

  """US/Pacific"""
  US_PACIFIC

  """UTC"""
  UTC
}

"""An enumeration."""
enum AccountsUserStateChoices {
  """Abia"""
  ABIA

  """Adamawa"""
  ADAMAWA

  """Akwa Ibom"""
  AKWA_IBOM

  """Anambra"""
  ANAMBRA

  """Bauchi"""
  BAUCHI

  """Bayelsa"""
  BAYELSA

  """Benue"""
  BENUE

  """Borno"""
  BORNO

  """Cross River"""
  CROSS_RIVER

  """Delta"""
  DELTA

  """Ebonyi"""
  EBONYI

  """Edo"""
  EDO

  """Ekiti"""
  EKITI

  """Enugu"""
  ENUGU

  """FCT - Abuja"""
  FCT_ABUJA

  """Gombe"""
  GOMBE

  """Imo"""
  IMO

  """Jigawa"""
  JIGAWA

  """Kaduna"""
  KADUNA

  """Kano"""
  KANO

  """Katsina"""
  KATSINA

  """Kebbi"""
  KEBBI

  """Kogi"""
  KOGI

  """Kwara"""
  KWARA

  """Lagos"""
  LAGOS

  """Nasarawa"""
  NASARAWA

  """Niger"""
  NIGER

  """Ogun"""
  OGUN

  """Ondo"""
  ONDO

  """Osun"""
  OSUN

  """Oyo"""
  OYO

  """Plateau"""
  PLATEAU

  """Rivers"""
  RIVERS

  """Sokoto"""
  SOKOTO

  """Taraba"""
  TARABA

  """Yobe"""
  YOBE

  """Zamfara"""
  ZAMFARA

  """Outside of Nigeria"""
  OUTSIDE_OF_NIGERIA
}

"""An enumeration."""
enum AccountsUserCountryChoices {
  """Afghanistan"""
  AF

  """Åland Islands"""
  AX

  """Albania"""
  AL

  """Algeria"""
  DZ

  """American Samoa"""
  AS

  """Andorra"""
  AD

  """Angola"""
  AO

  """Anguilla"""
  AI

  """Antarctica"""
  AQ

  """Antigua and Barbuda"""
  AG

  """Argentina"""
  AR

  """Armenia"""
  AM

  """Aruba"""
  AW

  """Australia"""
  AU

  """Austria"""
  AT

  """Azerbaijan"""
  AZ

  """Bahamas"""
  BS

  """Bahrain"""
  BH

  """Bangladesh"""
  BD

  """Barbados"""
  BB

  """Belarus"""
  BY

  """Belgium"""
  BE

  """Belize"""
  BZ

  """Benin"""
  BJ

  """Bermuda"""
  BM

  """Bhutan"""
  BT

  """Bolivia"""
  BO

  """Bonaire, Sint Eustatius and Saba"""
  BQ

  """Bosnia and Herzegovina"""
  BA

  """Botswana"""
  BW

  """Bouvet Island"""
  BV

  """Brazil"""
  BR

  """British Indian Ocean Territory"""
  IO

  """Brunei"""
  BN

  """Bulgaria"""
  BG

  """Burkina Faso"""
  BF

  """Burundi"""
  BI

  """Cabo Verde"""
  CV

  """Cambodia"""
  KH

  """Cameroon"""
  CM

  """Canada"""
  CA

  """Cayman Islands"""
  KY

  """Central African Republic"""
  CF

  """Chad"""
  TD

  """Chile"""
  CL

  """China"""
  CN

  """Christmas Island"""
  CX

  """Cocos (Keeling) Islands"""
  CC

  """Colombia"""
  CO

  """Comoros"""
  KM

  """Congo"""
  CG

  """Congo (the Democratic Republic of the)"""
  CD

  """Cook Islands"""
  CK

  """Costa Rica"""
  CR

  """Côte d'Ivoire"""
  CI

  """Croatia"""
  HR

  """Cuba"""
  CU

  """Curaçao"""
  CW

  """Cyprus"""
  CY

  """Czechia"""
  CZ

  """Denmark"""
  DK

  """Djibouti"""
  DJ

  """Dominica"""
  DM

  """Dominican Republic"""
  DO

  """Ecuador"""
  EC

  """Egypt"""
  EG

  """El Salvador"""
  SV

  """Equatorial Guinea"""
  GQ

  """Eritrea"""
  ER

  """Estonia"""
  EE

  """Eswatini"""
  SZ

  """Ethiopia"""
  ET

  """Falkland Islands (Malvinas)"""
  FK

  """Faroe Islands"""
  FO

  """Fiji"""
  FJ

  """Finland"""
  FI

  """France"""
  FR

  """French Guiana"""
  GF

  """French Polynesia"""
  PF

  """French Southern Territories"""
  TF

  """Gabon"""
  GA

  """Gambia"""
  GM

  """Georgia"""
  GE

  """Germany"""
  DE

  """Ghana"""
  GH

  """Gibraltar"""
  GI

  """Greece"""
  GR

  """Greenland"""
  GL

  """Grenada"""
  GD

  """Guadeloupe"""
  GP

  """Guam"""
  GU

  """Guatemala"""
  GT

  """Guernsey"""
  GG

  """Guinea"""
  GN

  """Guinea-Bissau"""
  GW

  """Guyana"""
  GY

  """Haiti"""
  HT

  """Heard Island and McDonald Islands"""
  HM

  """Holy See"""
  VA

  """Honduras"""
  HN

  """Hong Kong"""
  HK

  """Hungary"""
  HU

  """Iceland"""
  IS

  """India"""
  IN

  """Indonesia"""
  ID

  """Iran"""
  IR

  """Iraq"""
  IQ

  """Ireland"""
  IE

  """Isle of Man"""
  IM

  """Israel"""
  IL

  """Italy"""
  IT

  """Jamaica"""
  JM

  """Japan"""
  JP

  """Jersey"""
  JE

  """Jordan"""
  JO

  """Kazakhstan"""
  KZ

  """Kenya"""
  KE

  """Kiribati"""
  KI

  """Kuwait"""
  KW

  """Kyrgyzstan"""
  KG

  """Laos"""
  LA

  """Latvia"""
  LV

  """Lebanon"""
  LB

  """Lesotho"""
  LS

  """Liberia"""
  LR

  """Libya"""
  LY

  """Liechtenstein"""
  LI

  """Lithuania"""
  LT

  """Luxembourg"""
  LU

  """Macao"""
  MO

  """Madagascar"""
  MG

  """Malawi"""
  MW

  """Malaysia"""
  MY

  """Maldives"""
  MV

  """Mali"""
  ML

  """Malta"""
  MT

  """Marshall Islands"""
  MH

  """Martinique"""
  MQ

  """Mauritania"""
  MR

  """Mauritius"""
  MU

  """Mayotte"""
  YT

  """Mexico"""
  MX

  """Micronesia (Federated States of)"""
  FM

  """Moldova"""
  MD

  """Monaco"""
  MC

  """Mongolia"""
  MN

  """Montenegro"""
  ME

  """Montserrat"""
  MS

  """Morocco"""
  MA

  """Mozambique"""
  MZ

  """Myanmar"""
  MM

  """Namibia"""
  NA

  """Nauru"""
  NR

  """Nepal"""
  NP

  """Netherlands"""
  NL

  """New Caledonia"""
  NC

  """New Zealand"""
  NZ

  """Nicaragua"""
  NI

  """Niger"""
  NE

  """Nigeria"""
  NG

  """Niue"""
  NU

  """Norfolk Island"""
  NF

  """North Korea"""
  KP

  """North Macedonia"""
  MK

  """Northern Mariana Islands"""
  MP

  """Norway"""
  NO

  """Oman"""
  OM

  """Pakistan"""
  PK

  """Palau"""
  PW

  """Palestine, State of"""
  PS

  """Panama"""
  PA

  """Papua New Guinea"""
  PG

  """Paraguay"""
  PY

  """Peru"""
  PE

  """Philippines"""
  PH

  """Pitcairn"""
  PN

  """Poland"""
  PL

  """Portugal"""
  PT

  """Puerto Rico"""
  PR

  """Qatar"""
  QA

  """Réunion"""
  RE

  """Romania"""
  RO

  """Russia"""
  RU

  """Rwanda"""
  RW

  """Saint Barthélemy"""
  BL

  """Saint Helena, Ascension and Tristan da Cunha"""
  SH

  """Saint Kitts and Nevis"""
  KN

  """Saint Lucia"""
  LC

  """Saint Martin (French part)"""
  MF

  """Saint Pierre and Miquelon"""
  PM

  """Saint Vincent and the Grenadines"""
  VC

  """Samoa"""
  WS

  """San Marino"""
  SM

  """Sao Tome and Principe"""
  ST

  """Saudi Arabia"""
  SA

  """Senegal"""
  SN

  """Serbia"""
  RS

  """Seychelles"""
  SC

  """Sierra Leone"""
  SL

  """Singapore"""
  SG

  """Sint Maarten (Dutch part)"""
  SX

  """Slovakia"""
  SK

  """Slovenia"""
  SI

  """Solomon Islands"""
  SB

  """Somalia"""
  SO

  """South Africa"""
  ZA

  """South Georgia and the South Sandwich Islands"""
  GS

  """South Korea"""
  KR

  """South Sudan"""
  SS

  """Spain"""
  ES

  """Sri Lanka"""
  LK

  """Sudan"""
  SD

  """Suriname"""
  SR

  """Svalbard and Jan Mayen"""
  SJ

  """Sweden"""
  SE

  """Switzerland"""
  CH

  """Syria"""
  SY

  """Taiwan"""
  TW

  """Tajikistan"""
  TJ

  """Tanzania"""
  TZ

  """Thailand"""
  TH

  """Timor-Leste"""
  TL

  """Togo"""
  TG

  """Tokelau"""
  TK

  """Tonga"""
  TO

  """Trinidad and Tobago"""
  TT

  """Tunisia"""
  TN

  """Turkey"""
  TR

  """Turkmenistan"""
  TM

  """Turks and Caicos Islands"""
  TC

  """Tuvalu"""
  TV

  """Uganda"""
  UG

  """Ukraine"""
  UA

  """United Arab Emirates"""
  AE

  """United Kingdom"""
  GB

  """United States Minor Outlying Islands"""
  UM

  """United States of America"""
  US

  """Uruguay"""
  UY

  """Uzbekistan"""
  UZ

  """Vanuatu"""
  VU

  """Venezuela"""
  VE

  """Vietnam"""
  VN

  """Virgin Islands (British)"""
  VG

  """Virgin Islands (U.S.)"""
  VI

  """Wallis and Futuna"""
  WF

  """Western Sahara"""
  EH

  """Yemen"""
  YE

  """Zambia"""
  ZM

  """Zimbabwe"""
  ZW
}

"""An enumeration."""
enum AccountsUserNationalityChoices {
  """Afghanistan"""
  AF

  """Åland Islands"""
  AX

  """Albania"""
  AL

  """Algeria"""
  DZ

  """American Samoa"""
  AS

  """Andorra"""
  AD

  """Angola"""
  AO

  """Anguilla"""
  AI

  """Antarctica"""
  AQ

  """Antigua and Barbuda"""
  AG

  """Argentina"""
  AR

  """Armenia"""
  AM

  """Aruba"""
  AW

  """Australia"""
  AU

  """Austria"""
  AT

  """Azerbaijan"""
  AZ

  """Bahamas"""
  BS

  """Bahrain"""
  BH

  """Bangladesh"""
  BD

  """Barbados"""
  BB

  """Belarus"""
  BY

  """Belgium"""
  BE

  """Belize"""
  BZ

  """Benin"""
  BJ

  """Bermuda"""
  BM

  """Bhutan"""
  BT

  """Bolivia"""
  BO

  """Bonaire, Sint Eustatius and Saba"""
  BQ

  """Bosnia and Herzegovina"""
  BA

  """Botswana"""
  BW

  """Bouvet Island"""
  BV

  """Brazil"""
  BR

  """British Indian Ocean Territory"""
  IO

  """Brunei"""
  BN

  """Bulgaria"""
  BG

  """Burkina Faso"""
  BF

  """Burundi"""
  BI

  """Cabo Verde"""
  CV

  """Cambodia"""
  KH

  """Cameroon"""
  CM

  """Canada"""
  CA

  """Cayman Islands"""
  KY

  """Central African Republic"""
  CF

  """Chad"""
  TD

  """Chile"""
  CL

  """China"""
  CN

  """Christmas Island"""
  CX

  """Cocos (Keeling) Islands"""
  CC

  """Colombia"""
  CO

  """Comoros"""
  KM

  """Congo"""
  CG

  """Congo (the Democratic Republic of the)"""
  CD

  """Cook Islands"""
  CK

  """Costa Rica"""
  CR

  """Côte d'Ivoire"""
  CI

  """Croatia"""
  HR

  """Cuba"""
  CU

  """Curaçao"""
  CW

  """Cyprus"""
  CY

  """Czechia"""
  CZ

  """Denmark"""
  DK

  """Djibouti"""
  DJ

  """Dominica"""
  DM

  """Dominican Republic"""
  DO

  """Ecuador"""
  EC

  """Egypt"""
  EG

  """El Salvador"""
  SV

  """Equatorial Guinea"""
  GQ

  """Eritrea"""
  ER

  """Estonia"""
  EE

  """Eswatini"""
  SZ

  """Ethiopia"""
  ET

  """Falkland Islands (Malvinas)"""
  FK

  """Faroe Islands"""
  FO

  """Fiji"""
  FJ

  """Finland"""
  FI

  """France"""
  FR

  """French Guiana"""
  GF

  """French Polynesia"""
  PF

  """French Southern Territories"""
  TF

  """Gabon"""
  GA

  """Gambia"""
  GM

  """Georgia"""
  GE

  """Germany"""
  DE

  """Ghana"""
  GH

  """Gibraltar"""
  GI

  """Greece"""
  GR

  """Greenland"""
  GL

  """Grenada"""
  GD

  """Guadeloupe"""
  GP

  """Guam"""
  GU

  """Guatemala"""
  GT

  """Guernsey"""
  GG

  """Guinea"""
  GN

  """Guinea-Bissau"""
  GW

  """Guyana"""
  GY

  """Haiti"""
  HT

  """Heard Island and McDonald Islands"""
  HM

  """Holy See"""
  VA

  """Honduras"""
  HN

  """Hong Kong"""
  HK

  """Hungary"""
  HU

  """Iceland"""
  IS

  """India"""
  IN

  """Indonesia"""
  ID

  """Iran"""
  IR

  """Iraq"""
  IQ

  """Ireland"""
  IE

  """Isle of Man"""
  IM

  """Israel"""
  IL

  """Italy"""
  IT

  """Jamaica"""
  JM

  """Japan"""
  JP

  """Jersey"""
  JE

  """Jordan"""
  JO

  """Kazakhstan"""
  KZ

  """Kenya"""
  KE

  """Kiribati"""
  KI

  """Kuwait"""
  KW

  """Kyrgyzstan"""
  KG

  """Laos"""
  LA

  """Latvia"""
  LV

  """Lebanon"""
  LB

  """Lesotho"""
  LS

  """Liberia"""
  LR

  """Libya"""
  LY

  """Liechtenstein"""
  LI

  """Lithuania"""
  LT

  """Luxembourg"""
  LU

  """Macao"""
  MO

  """Madagascar"""
  MG

  """Malawi"""
  MW

  """Malaysia"""
  MY

  """Maldives"""
  MV

  """Mali"""
  ML

  """Malta"""
  MT

  """Marshall Islands"""
  MH

  """Martinique"""
  MQ

  """Mauritania"""
  MR

  """Mauritius"""
  MU

  """Mayotte"""
  YT

  """Mexico"""
  MX

  """Micronesia (Federated States of)"""
  FM

  """Moldova"""
  MD

  """Monaco"""
  MC

  """Mongolia"""
  MN

  """Montenegro"""
  ME

  """Montserrat"""
  MS

  """Morocco"""
  MA

  """Mozambique"""
  MZ

  """Myanmar"""
  MM

  """Namibia"""
  NA

  """Nauru"""
  NR

  """Nepal"""
  NP

  """Netherlands"""
  NL

  """New Caledonia"""
  NC

  """New Zealand"""
  NZ

  """Nicaragua"""
  NI

  """Niger"""
  NE

  """Nigeria"""
  NG

  """Niue"""
  NU

  """Norfolk Island"""
  NF

  """North Korea"""
  KP

  """North Macedonia"""
  MK

  """Northern Mariana Islands"""
  MP

  """Norway"""
  NO

  """Oman"""
  OM

  """Pakistan"""
  PK

  """Palau"""
  PW

  """Palestine, State of"""
  PS

  """Panama"""
  PA

  """Papua New Guinea"""
  PG

  """Paraguay"""
  PY

  """Peru"""
  PE

  """Philippines"""
  PH

  """Pitcairn"""
  PN

  """Poland"""
  PL

  """Portugal"""
  PT

  """Puerto Rico"""
  PR

  """Qatar"""
  QA

  """Réunion"""
  RE

  """Romania"""
  RO

  """Russia"""
  RU

  """Rwanda"""
  RW

  """Saint Barthélemy"""
  BL

  """Saint Helena, Ascension and Tristan da Cunha"""
  SH

  """Saint Kitts and Nevis"""
  KN

  """Saint Lucia"""
  LC

  """Saint Martin (French part)"""
  MF

  """Saint Pierre and Miquelon"""
  PM

  """Saint Vincent and the Grenadines"""
  VC

  """Samoa"""
  WS

  """San Marino"""
  SM

  """Sao Tome and Principe"""
  ST

  """Saudi Arabia"""
  SA

  """Senegal"""
  SN

  """Serbia"""
  RS

  """Seychelles"""
  SC

  """Sierra Leone"""
  SL

  """Singapore"""
  SG

  """Sint Maarten (Dutch part)"""
  SX

  """Slovakia"""
  SK

  """Slovenia"""
  SI

  """Solomon Islands"""
  SB

  """Somalia"""
  SO

  """South Africa"""
  ZA

  """South Georgia and the South Sandwich Islands"""
  GS

  """South Korea"""
  KR

  """South Sudan"""
  SS

  """Spain"""
  ES

  """Sri Lanka"""
  LK

  """Sudan"""
  SD

  """Suriname"""
  SR

  """Svalbard and Jan Mayen"""
  SJ

  """Sweden"""
  SE

  """Switzerland"""
  CH

  """Syria"""
  SY

  """Taiwan"""
  TW

  """Tajikistan"""
  TJ

  """Tanzania"""
  TZ

  """Thailand"""
  TH

  """Timor-Leste"""
  TL

  """Togo"""
  TG

  """Tokelau"""
  TK

  """Tonga"""
  TO

  """Trinidad and Tobago"""
  TT

  """Tunisia"""
  TN

  """Turkey"""
  TR

  """Turkmenistan"""
  TM

  """Turks and Caicos Islands"""
  TC

  """Tuvalu"""
  TV

  """Uganda"""
  UG

  """Ukraine"""
  UA

  """United Arab Emirates"""
  AE

  """United Kingdom"""
  GB

  """United States Minor Outlying Islands"""
  UM

  """United States of America"""
  US

  """Uruguay"""
  UY

  """Uzbekistan"""
  UZ

  """Vanuatu"""
  VU

  """Venezuela"""
  VE

  """Vietnam"""
  VN

  """Virgin Islands (British)"""
  VG

  """Virgin Islands (U.S.)"""
  VI

  """Wallis and Futuna"""
  WF

  """Western Sahara"""
  EH

  """Yemen"""
  YE

  """Zambia"""
  ZM

  """Zimbabwe"""
  ZW
}

type NextOfKinModelTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [NextOfKinModelTypeEdge]!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A Relay edge containing a `NextOfKinModelType` and its cursor."""
type NextOfKinModelTypeEdge {
  """The item at the end of the edge"""
  node: NextOfKinModelType

  """A cursor for use in pagination"""
  cursor: String!
}

""" NextOfKin model type definition """
type NextOfKinModelType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  user: UserType!

  """"""
  firstName: String!

  """"""
  lastName: String!

  """"""
  middleName: String!

  """"""
  email: String!

  """Write in international phone no format (+234 or +41)"""
  phone: String

  """"""
  relationship: String
  pk: ID!
}

type AcademicRecordModelTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AcademicRecordModelTypeEdge]!
}

"""A Relay edge containing a `AcademicRecordModelType` and its cursor."""
type AcademicRecordModelTypeEdge {
  """The item at the end of the edge"""
  node: AcademicRecordModelType

  """A cursor for use in pagination"""
  cursor: String!
}

""" Academic Record model type definition """
type AcademicRecordModelType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  uuid: UUID!

  """"""
  user: UserType!

  """"""
  program: String!

  """"""
  school: SchoolModelType!

  """"""
  discipline: DepartmentModelType

  """Academic session admitted"""
  admitted: Date

  """Academic session graduated"""
  graduated: Date

  """Currently enrolled in this academic program"""
  current: Boolean

  """Upload size of file should be a maximum of 2mb"""
  certificate: String

  """"""
  created: DateTime!

  """"""
  updated: DateTime!
  pk: ID!
}

"""
Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

""" School model type definition """
type SchoolModelType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  name: String!

  """Popular abbreviation of School name"""
  short: String

  """"""
  address: String!

  """"""
  state: String

  """"""
  country: String!

  """"""
  created: DateTime!

  """"""
  updated: DateTime!

  """"""
  schDept(offset: Int, before: String, after: String, first: Int, last: Int, name: String): DepartmentModelTypeConnection!

  """"""
  schAcad(offset: Int, before: String, after: String, first: Int, last: Int, program: String, user_Id: Float, school_Id: Float, discipline_Id: Float, admitted: Date, graduated: Date, current: Boolean): AcademicRecordModelTypeConnection!
  pk: ID!
}

type DepartmentModelTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [DepartmentModelTypeEdge]!
}

"""A Relay edge containing a `DepartmentModelType` and its cursor."""
type DepartmentModelTypeEdge {
  """The item at the end of the edge"""
  node: DepartmentModelType

  """A cursor for use in pagination"""
  cursor: String!
}

""" Discipline model type definition """
type DepartmentModelType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  name: String!

  """"""
  school: SchoolModelType!

  """"""
  created: DateTime!

  """"""
  updated: DateTime!

  """"""
  deptAcad(offset: Int, before: String, after: String, first: Int, last: Int, program: String, user_Id: Float, school_Id: Float, discipline_Id: Float, admitted: Date, graduated: Date, current: Boolean): AcademicRecordModelTypeConnection!
  pk: ID!
}

type WorkExperienceModelTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [WorkExperienceModelTypeEdge]!
}

"""A Relay edge containing a `WorkExperienceModelType` and its cursor."""
type WorkExperienceModelTypeEdge {
  """The item at the end of the edge"""
  node: WorkExperienceModelType

  """A cursor for use in pagination"""
  cursor: String!
}

""" WorkExperience model type definition """
type WorkExperienceModelType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  uuid: UUID!

  """"""
  user: UserType!

  """"""
  companyName: String

  """YYYY-MM-DD"""
  startDate: Date!

  """YYYY-MM-DD, Leave blank if still working in that role"""
  endDate: Date

  """"""
  designation: String

  """Full description of what you duties entails"""
  description: String

  """Indicates if this is your current work"""
  current: Boolean

  """"""
  address: String

  """"""
  state: String

  """"""
  country: String

  """"""
  created: DateTime!

  """"""
  updated: DateTime!
  pk: ID!
}

type OrganizationTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [OrganizationTypeEdge]!
  totalCount: Int
  edgeCount: Int
}

"""A Relay edge containing a `OrganizationType` and its cursor."""
type OrganizationTypeEdge {
  """The item at the end of the edge"""
  node: OrganizationType

  """A cursor for use in pagination"""
  cursor: String!
}

type OrganizationType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  uuid: UUID!

  """"""
  name: String!

  """Popular name you are called in a short form"""
  abbrev: String!

  """Data about the Organization: Vision, Mission, etc"""
  about: String

  """You can use your domain name here without the TLD"""
  slug: String!

  """"""
  email: String

  """"""
  phone: String

  """"""
  officeAddress: String

  """Has recurring monthly meetings (e.g. OGM)"""
  monthly: Boolean

  """Has recurring annual meetings (e.g. AGM)"""
  yearly: Boolean

  """Keeps minutes of meetings during meetings"""
  minutes: Boolean

  """Takes Attendance of people at meetings"""
  attendance: Boolean

  """"""
  twitter: String

  """"""
  facebook: String

  """"""
  linkedin: String

  """"""
  telegram: Int

  """The Membership renewal rate in naira"""
  amount: Decimal

  """"""
  bankName: String

  """"""
  bankAccount: String

  """"""
  flutterwaveSubaccountId: String

  """Bank sort code is for international transfer"""
  bankSortCode: String

  """"""
  timezone: String!

  """Members automatically join when they request to join"""
  join: Boolean

  """Uncheck if creating a super body with child organizations underneath"""
  visible: Boolean

  """"""
  created: DateTime!

  """"""
  updated: DateTime!

  """"""
  createdBy: UserType

  """Mother Organization"""
  superbody: OrganizationType

  """Mother Organization"""
  selfie(offset: Int, before: String, after: String, first: Int, last: Int, name: String, abbrev: String, slug: String, myOrg_Approved: Boolean, myOrg_Blocked: Boolean, myOrg_User: ID): OrganizationTypeConnection!

  """"""
  orgsubdivisionSet(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, subdivision: String, chairperson: String, phoneNumber: String, email: String, meetingDaysTime: String, meetingVenue: String, dateOfInauguration: Date, state: String, type: String): OrgSubDivisionTypeConnection!

  """"""
  orgadminSet(offset: Int, before: String, after: String, first: Int, last: Int, organization: ID, creator: ID, user: ID): OrgAdminTypeConnection!

  """"""
  orgadmininvitationSet(offset: Int, before: String, after: String, first: Int, last: Int, organization: ID): OrgAdminInvitationTypeConnection!

  """"""
  orgMembershiptypes: [OrgMembershipType!]!

  """"""
  orgMembershippayments(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, user_Id: Float, membershipType: ID, paid: Boolean, paymentType: String, paymentApproval: Boolean): MembershipPaymentTypeConnection!

  """"""
  organizationpaymentapikeysSet(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, platform: String): OrganizationPaymentAPITypeConnection!

  """"""
  specialtySet(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, name: String): SpecialtyTypeConnection!

  """"""
  subspecialtySet(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, specialty_Id: Float, name: String): SubSpecialtyTypeConnection!

  """"""
  myOrg(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, user_Id: Float, subdivision_Id: Float, newOrOld: String, orgNumber: String, verified: Boolean, approved: Boolean): JoinRequestTypeConnection!

  """"""
  leadershipcategorySet(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, name: String): LeadershipCategoryTypeConnection!

  """"""
  leadershippositionSet(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, position: String, rank: Int): LeadershipPositionTypeConnection!

  """"""
  executiveSet(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, position_Id: Float, category_Id: Float, startTenure: Date, current: Boolean): ExecutiveTypeConnection!

  """"""
  org(offset: Int, before: String, after: String, first: Int, last: Int, organization: ID, firstName: String, lastName: String, used: Boolean): MemberInvitationTypeConnection!

  """"""
  storeWebsite(offset: Int, before: String, after: String, first: Int, last: Int, org: ID, event: ID, customDomain: String, subDomain: String): WebsiteTypeConnection!

  """"""
  bannerSliderImages(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float): WebsiteBannerSliderImageTypeConnection!

  """"""
  faqs(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, createdBy_Id: Float): WebsiteFaqTypeConnection!

  """"""
  meetingcategorySet(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, name: String): MeetingCategoryTypeConnection!

  """"""
  events(offset: Int, before: String, after: String, first: Int, last: Int, name: String, theme: String, venue: String, org_Slug: String, category_Name: String, category_Id: Float): MeetingTypeConnection!

  """"""
  ticketSet(offset: Int, before: String, after: String, first: Int, last: Int, name: String, meeting_Id: Float, org_Id: Float, earlyBirdFee: String, earlyBirdDeadline: Date, lateBirdFee: String): TicketTypeConnection!

  """"""
  sponsorSet(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, name: String): SponsorTypeConnection!

  """"""
  conferencepaymentSet(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, ticket: ID, paid: Boolean, paymentType: String, paymentApproval: Boolean): PaymentTypeConnection!

  """"""
  attendees(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, present: Boolean, excuse: String, interested: Boolean): AttendanceTypeConnection!

  """"""
  presenters(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, person: ID, name: String, slug: String): PresenterTypeConnection!

  """"""
  presentationSet(offset: Int, before: String, after: String, first: Int, last: Int, title: String, meeting: ID, author: [ID], externalUpload: String): PresentationTypeConnection!

  """"""
  publicationcategorySet(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, name: String): PublicationCategoryTypeConnection!

  """"""
  publications(offset: Int, before: String, after: String, first: Int, last: Int, id: Float, title: String, org_Id: Float, externalUpload: String, category_Id: Float): PublicationTypeConnection!

  """"""
  announcements(offset: Int, before: String, after: String, first: Int, last: Int, title: String, body: String, announcementType: String): AnnouncementTypeConnection!

  """"""
  hearaboutusOrganization(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, organization: ID, respondent: ID): HowDidYouHearAboutUsTypeConnection!

  """"""
  conferenceregistrationSet(offset: Int, before: String, after: String, first: Int, last: Int, user_Id: Float, event_Id: Float, ticket_Id: Float, organization_Id: Float): ConferenceRegistrationTypeConnection!
  pk: ID!
  photoUrl: String
}

"""The `Decimal` scalar type represents a python Decimal."""
scalar Decimal

type OrgSubDivisionTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [OrgSubDivisionTypeEdge]!
}

"""A Relay edge containing a `OrgSubDivisionType` and its cursor."""
type OrgSubDivisionTypeEdge {
  """The item at the end of the edge"""
  node: OrgSubDivisionType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The OrgSubDivision Model Object"""
type OrgSubDivisionType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  organization: OrganizationType

  """"""
  subdivision: String!

  """"""
  chairperson: String

  """"""
  phoneNumber: String

  """"""
  email: String

  """"""
  meetingDaysTime: String

  """"""
  meetingVenue: String

  """"""
  dateOfInauguration: Date

  """"""
  state: String

  """"""
  type: String

  """"""
  created: DateTime!

  """"""
  updated: DateTime!

  """"""
  joinrequestSet(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, user_Id: Float, subdivision_Id: Float, newOrOld: String, orgNumber: String, verified: Boolean, approved: Boolean): JoinRequestTypeConnection!
  pk: ID!
}

type JoinRequestTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [JoinRequestTypeEdge]!
}

"""A Relay edge containing a `JoinRequestType` and its cursor."""
type JoinRequestTypeEdge {
  """The item at the end of the edge"""
  node: JoinRequestType

  """A cursor for use in pagination"""
  cursor: String!
}

type JoinRequestType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  uuid: UUID!

  """"""
  organization: OrganizationType
  user: UserType

  """"""
  approved: Boolean

  """"""
  verified: Boolean

  """"""
  membershipApplicationCompleted: Boolean

  """"""
  rejectionReason: String

  """"""
  contactMessage: String

  """"""
  subdivision: OrgSubDivisionType

  """"""
  membershipCadre: OrgMembershipType

  """"""
  newOrOld: String

  """"""
  orgNumber: String

  """"""
  nseNumber: String

  """"""
  corenNumber: String

  """"""
  refereeOneNumber: String

  """"""
  refereeOneName: String

  """"""
  refereeTwoNumber: String

  """"""
  refereeTwoName: String

  """"""
  refereeThreeNumber: String

  """"""
  refereeThreeName: String

  """"""
  specialty: SpecialtyType

  """"""
  subSpecialty: SubSpecialtyType

  """"""
  otherSpecialty: String

  """"""
  paymentName: String

  """"""
  amountOwingCurrency: String!

  """Amount owed to the organization"""
  amountOwing: Decimal

  """"""
  amountOwingReason: String

  """"""
  created: DateTime!

  """"""
  updated: DateTime!
  pk: ID
  amountOwingStr: String
  amountOwingValue: Int
}

"""The Organization's Membership Types/Categories Object"""
type OrgMembershipType {
  """"""
  id: ID!

  """"""
  organization: OrganizationType

  """"""
  name: String!

  """"""
  description: String
  membershipFeeStr: String
  membershipFeeValue: Int
  membershipRenewalFeeStr: String
  membershipRenewalFeeValue: Int
}

"""An Specialty Model Object"""
type SpecialtyType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  uuid: UUID!

  """"""
  organization: OrganizationType

  """"""
  name: String

  """"""
  subspecialtySet(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, specialty_Id: Float, name: String): SubSpecialtyTypeConnection!

  """"""
  joinrequestSet(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, user_Id: Float, subdivision_Id: Float, newOrOld: String, orgNumber: String, verified: Boolean, approved: Boolean): JoinRequestTypeConnection!
  pk: ID!
}

type SubSpecialtyTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SubSpecialtyTypeEdge]!
}

"""A Relay edge containing a `SubSpecialtyType` and its cursor."""
type SubSpecialtyTypeEdge {
  """The item at the end of the edge"""
  node: SubSpecialtyType

  """A cursor for use in pagination"""
  cursor: String!
}

"""An SubSpecialty Model Object"""
type SubSpecialtyType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  uuid: UUID!

  """"""
  organization: OrganizationType

  """"""
  specialty: SpecialtyType

  """"""
  name: String

  """"""
  joinrequestSet(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, user_Id: Float, subdivision_Id: Float, newOrOld: String, orgNumber: String, verified: Boolean, approved: Boolean): JoinRequestTypeConnection!
  pk: ID!
}

type OrgAdminTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [OrgAdminTypeEdge]!
}

"""A Relay edge containing a `OrgAdminType` and its cursor."""
type OrgAdminTypeEdge {
  """The item at the end of the edge"""
  node: OrgAdminType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The Organization Admin Object"""
type OrgAdminType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  organization: OrganizationType

  """"""
  creator: UserType

  """"""
  user: UserType

  """"""
  created: DateTime!

  """"""
  updated: DateTime!
}

type OrgAdminInvitationTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [OrgAdminInvitationTypeEdge]!
}

"""A Relay edge containing a `OrgAdminInvitationType` and its cursor."""
type OrgAdminInvitationTypeEdge {
  """The item at the end of the edge"""
  node: OrgAdminInvitationType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The Organization Admin Invitation Object"""
type OrgAdminInvitationType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  uuid: UUID!

  """"""
  organization: OrganizationType

  """"""
  creator: UserType

  """"""
  email: String!

  """"""
  used: Boolean!

  """"""
  created: DateTime!

  """"""
  updated: DateTime!
}

type MembershipPaymentTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MembershipPaymentTypeEdge]!
}

"""A Relay edge containing a `MembershipPaymentType` and its cursor."""
type MembershipPaymentTypeEdge {
  """The item at the end of the edge"""
  node: MembershipPaymentType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The Membership Payment Model Object"""
type MembershipPaymentType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  uuid: UUID!

  """"""
  user: UserType

  """"""
  org: OrganizationType

  """"""
  membershipType: OrgMembershipType

  """"""
  amountPaidCurrency: String!

  """"""
  amountPaid: Decimal

  """"""
  txref: String

  """"""
  paid: Boolean!

  """"""
  paymentType: String!

  """"""
  paymentStatus: String!

  """"""
  paymentName: String

  """"""
  paymentApproval: Boolean

  """"""
  refundStatus: Boolean!

  """"""
  payerName: String

  """"""
  paymentDate: Date

  """"""
  proofOfPayment: String

  """"""
  created: DateTime!

  """"""
  updated: DateTime!
  amountPaidStr: String
  amountPaidValue: Int
  pk: ID!
}

type OrganizationPaymentAPITypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [OrganizationPaymentAPITypeEdge]!
}

"""A Relay edge containing a `OrganizationPaymentAPIType` and its cursor."""
type OrganizationPaymentAPITypeEdge {
  """The item at the end of the edge"""
  node: OrganizationPaymentAPIType

  """A cursor for use in pagination"""
  cursor: String!
}

"""An Organization Payment API Model Object"""
type OrganizationPaymentAPIType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  platform: String

  """"""
  organization: OrganizationType

  """"""
  testSecretKey: String

  """"""
  testPublicKey: String

  """"""
  liveSecretKey: String

  """"""
  livePublicKey: String
  pk: ID!
}

type SpecialtyTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SpecialtyTypeEdge]!
}

"""A Relay edge containing a `SpecialtyType` and its cursor."""
type SpecialtyTypeEdge {
  """The item at the end of the edge"""
  node: SpecialtyType

  """A cursor for use in pagination"""
  cursor: String!
}

type LeadershipCategoryTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [LeadershipCategoryTypeEdge]!
}

"""A Relay edge containing a `LeadershipCategoryType` and its cursor."""
type LeadershipCategoryTypeEdge {
  """The item at the end of the edge"""
  node: LeadershipCategoryType

  """A cursor for use in pagination"""
  cursor: String!
}

"""An LeadershipCategory Model Object"""
type LeadershipCategoryType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  org: OrganizationType

  """"""
  name: String!

  """"""
  description: String

  """"""
  executiveSet(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, position_Id: Float, category_Id: Float, startTenure: Date, current: Boolean): ExecutiveTypeConnection!
  pk: ID!
}

type ExecutiveTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ExecutiveTypeEdge]!
  totalCount: Int
  edgeCount: Int
}

"""A Relay edge containing a `ExecutiveType` and its cursor."""
type ExecutiveTypeEdge {
  """The item at the end of the edge"""
  node: ExecutiveType

  """A cursor for use in pagination"""
  cursor: String!
}

"""An Executive Model Object"""
type ExecutiveType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  uuid: UUID!

  """"""
  org: OrganizationType

  """"""
  position: LeadershipPositionType

  """"""
  category: LeadershipCategoryType

  """"""
  name: String

  """"""
  bio: String

  """"""
  photo: String

  """"""
  startTenure: Date

  """"""
  endTenure: Date

  """this person currently holds this position"""
  current: Boolean!

  """Enter facebook username"""
  facebook: String

  """Enter twitter username"""
  twitter: String

  """"""
  email: String
  pk: ID!
  photoUrl: String
}

"""An LeadershipPosition Model Object"""
type LeadershipPositionType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  position: String!

  """
  This determines how it would displayed. If Chairman is 1, he will appear topmost, Vice is 2, like that...
  """
  rank: Int!

  """"""
  job: String

  """"""
  tenure: String

  """"""
  slug: String

  """"""
  org: OrganizationType

  """"""
  positions(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, position_Id: Float, category_Id: Float, startTenure: Date, current: Boolean): ExecutiveTypeConnection!
  pk: ID!
}

type LeadershipPositionTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [LeadershipPositionTypeEdge]!
  totalCount: Int
  edgeCount: Int
}

"""A Relay edge containing a `LeadershipPositionType` and its cursor."""
type LeadershipPositionTypeEdge {
  """The item at the end of the edge"""
  node: LeadershipPositionType

  """A cursor for use in pagination"""
  cursor: String!
}

type MemberInvitationTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MemberInvitationTypeEdge]!
}

"""A Relay edge containing a `MemberInvitationType` and its cursor."""
type MemberInvitationTypeEdge {
  """The item at the end of the edge"""
  node: MemberInvitationType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The Imported Members Invitation Object"""
type MemberInvitationType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  uuid: UUID!

  """"""
  organization: OrganizationType

  """"""
  firstName: String!

  """"""
  lastName: String!

  """"""
  phoneNumber: String

  """"""
  email: String

  """"""
  creator: UserType

  """"""
  invited: Boolean!

  """"""
  used: Boolean!

  """"""
  created: DateTime!

  """"""
  updated: DateTime!
}

type WebsiteTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [WebsiteTypeEdge]!
}

"""A Relay edge containing a `WebsiteType` and its cursor."""
type WebsiteTypeEdge {
  """The item at the end of the edge"""
  node: WebsiteType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The website object related to an organization and event"""
type WebsiteType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  org: OrganizationType

  """"""
  event: MeetingType

  """Custom external domain"""
  customDomain: String

  """chosen subdomain on peddlesoft.com"""
  subDomain: String

  """"""
  webLogo: String

  """"""
  bannerLogo: String

  """"""
  headerTitle: String

  """"""
  header: String

  """"""
  body: String

  """The primary color as theme for pages"""
  primaryColor: String

  """The secondary color as theme for pages"""
  secondaryColor: String

  """The primary color for texts"""
  primaryTextColor: String

  """The secondary color for texts"""
  secondaryTextColor: String

  """The primary color for buttons"""
  primaryBtnColor: String

  """The secondary color for buttons"""
  secondaryBtnColor: String

  """The primary color for website background"""
  primaryBgColor: String

  """The secondary color for website background"""
  secondaryBgColor: String

  """The Primary Font for the Website"""
  primaryFont: String

  """The Secondary Font for the Website"""
  secondaryFont: String

  """The Body Font for the Website"""
  bodyFont: String

  """"""
  websiteSliderImages(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float): WebsiteBannerSliderImageTypeConnection!
  webLogoUrl: String
  bannerLogoUrl: String
}

"""The Meeting / events object"""
type MeetingType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  category: MeetingCategoryType

  """"""
  uuid: UUID!

  """"""
  name: String!

  """Subtitle of event"""
  theme: String

  """Event objectives, sub-themes"""
  description: String

  """"""
  venue: String

  """"""
  attendance: Boolean!

  """
  A 6-digit Attendance code to be enter via the Mobile App at the meeting venue
  """
  code: String

  """"""
  startDate: Date!

  """"""
  startTime: Time!

  """Cover photo/ flyer of the event"""
  flyer: String

  """Event logo"""
  eventLogo: String

  """"""
  endDate: Date

  """"""
  endTime: Time

  """Minute of previous meeting to be read at this meeting"""
  minutes: String

  """"""
  session: Boolean!

  """"""
  mainEvent: MeetingType

  """The Planning Committee to contact for attention"""
  rsvp: String

  """Should payment be collected during registration for this event"""
  paid: Boolean!

  """This indicates if the event is specifically a conference"""
  isConference: Boolean

  """Publishing an event makes it accessible for everyone to see/register"""
  eventState: String!

  """"""
  publishAt: DateTime

  """
  Generic Invitation Letter for a Paid Event, Must have fillable Form Fields in PDF
  """
  invitationLetter: String

  """
  A downloadable certificate related to this event. Must have fillable Form Fields in PDF
  """
  certificate: String

  """Download Certification Condition I"""
  downloadCertificateCondition1: Boolean!

  """Download Certification Condition II"""
  downloadCertificateCondition2: Boolean!

  """"""
  url: String

  """"""
  createdBy: UserType

  """
  Youtube, Zoom, Google Meet, Facebook or any link for members to join the event
  """
  onlineMeetingLink: String

  """The domain name of the organization hosting this event"""
  domainName: String

  """"""
  org: OrganizationType

  """"""
  created: DateTime!

  """"""
  updated: DateTime!

  """"""
  locationWebsite(offset: Int, before: String, after: String, first: Int, last: Int, org: ID, event: ID, customDomain: String, subDomain: String): WebsiteTypeConnection!

  """"""
  meetingSet(offset: Int, before: String, after: String, first: Int, last: Int, name: String, theme: String, venue: String, org_Slug: String, category_Name: String, category_Id: Float): MeetingTypeConnection!

  """"""
  eventTicket(offset: Int, before: String, after: String, first: Int, last: Int, name: String, meeting_Id: Float, org_Id: Float, earlyBirdFee: String, earlyBirdDeadline: Date, lateBirdFee: String): TicketTypeConnection!

  """"""
  meetingSponsor(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, name: String): SponsorTypeConnection!

  """"""
  payers(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, ticket: ID, paid: Boolean, paymentType: String, paymentApproval: Boolean): PaymentTypeConnection!

  """"""
  meetings(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, present: Boolean, excuse: String, interested: Boolean): AttendanceTypeConnection!

  """"""
  presenterMeetings(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, person: ID, name: String, slug: String): PresenterTypeConnection!

  """"""
  paperMeetings(offset: Int, before: String, after: String, first: Int, last: Int, title: String, meeting: ID, author: [ID], externalUpload: String): PresentationTypeConnection!

  """"""
  announcementSet(offset: Int, before: String, after: String, first: Int, last: Int, title: String, body: String, announcementType: String): AnnouncementTypeConnection!

  """"""
  scheduleMeetings(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, location: String, title: String, description: String): ScheduleTypeConnection!

  """"""
  feedbackMeetings(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, respondent: ID): FeedbackTypeConnection!

  """"""
  hearaboutusMeetings(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, organization: ID, respondent: ID): HowDidYouHearAboutUsTypeConnection!

  """"""
  conferenceEvent(offset: Int, before: String, after: String, first: Int, last: Int, user_Id: Float, event_Id: Float, ticket_Id: Float, organization_Id: Float): ConferenceRegistrationTypeConnection!
  pk: ID!
  photoUrl: String
  minutesUrl: String
  eventLogoUrl: String
}

"""The MeetingCategory Model Object"""
type MeetingCategoryType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  org: OrganizationType

  """"""
  name: String!

  """"""
  description: String

  """"""
  meetingSet(offset: Int, before: String, after: String, first: Int, last: Int, name: String, theme: String, venue: String, org_Slug: String, category_Name: String, category_Id: Float): MeetingTypeConnection!
  pk: ID
}

type MeetingTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MeetingTypeEdge]!
  totalCount: Int
  edgeCount: Int
}

"""A Relay edge containing a `MeetingType` and its cursor."""
type MeetingTypeEdge {
  """The item at the end of the edge"""
  node: MeetingType

  """A cursor for use in pagination"""
  cursor: String!
}

"""
The `Time` scalar type represents a Time value as
specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Time

type TicketTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TicketTypeEdge]!
  totalCount: Int
  edgeCount: Int
}

"""A Relay edge containing a `TicketType` and its cursor."""
type TicketTypeEdge {
  """The item at the end of the edge"""
  node: TicketType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The ticket object for an event"""
type TicketType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  org: OrganizationType

  """"""
  meeting: MeetingType

  """"""
  name: String!

  """"""
  earlyBirdFeeCurrency: String!
  earlyBirdFee: String

  """"""
  earlyBirdDeadline: Date

  """"""
  lateBirdFeeCurrency: String!
  lateBirdFee: String

  """"""
  ticketPaid(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, ticket: ID, paid: Boolean, paymentType: String, paymentApproval: Boolean): PaymentTypeConnection!

  """"""
  conferenceTicket(offset: Int, before: String, after: String, first: Int, last: Int, user_Id: Float, event_Id: Float, ticket_Id: Float, organization_Id: Float): ConferenceRegistrationTypeConnection!
  pk: ID
  earlyBirdFeeStr: String
  earlyBirdFeeValue: Int
  lateBirdFeeStr: String
  lateBirdFeeValue: Int
}

type PaymentTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PaymentTypeEdge]!
}

"""A Relay edge containing a `PaymentType` and its cursor."""
type PaymentTypeEdge {
  """The item at the end of the edge"""
  node: PaymentType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The Payment Model Object"""
type PaymentType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  uuid: UUID!

  """"""
  org: OrganizationType

  """"""
  meeting: MeetingType

  """"""
  ticket: TicketType

  """"""
  user: UserType

  """"""
  amountPaidCurrency: String!

  """"""
  amountPaid: Decimal

  """"""
  txref: String

  """"""
  paid: Boolean!

  """"""
  paymentType: String!

  """"""
  paymentName: String

  """"""
  paymentApproval: Boolean

  """"""
  refundStatus: Boolean!

  """"""
  payerName: String

  """"""
  paymentDate: Date

  """"""
  proofOfPayment: String

  """"""
  created: DateTime!

  """"""
  updated: DateTime!
}

type ConferenceRegistrationTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ConferenceRegistrationTypeEdge]!
}

"""A Relay edge containing a `ConferenceRegistrationType` and its cursor."""
type ConferenceRegistrationTypeEdge {
  """The item at the end of the edge"""
  node: ConferenceRegistrationType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The Conference Registration Model Object"""
type ConferenceRegistrationType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  user: UserType

  """"""
  event: MeetingType

  """"""
  ticket: TicketType

  """"""
  organization: OrganizationType

  """"""
  firstName: String

  """"""
  middleName: String

  """"""
  lastName: String

  """"""
  email: String

  """e.g. +2348012345678"""
  phone: String
  pk: ID
}

type SponsorTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SponsorTypeEdge]!
  totalCount: Int
  edgeCount: Int
}

"""A Relay edge containing a `SponsorType` and its cursor."""
type SponsorTypeEdge {
  """The item at the end of the edge"""
  node: SponsorType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The ticket object for an event"""
type SponsorType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  meeting: MeetingType

  """"""
  name: String
  logoUrl: String
}

type AttendanceTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AttendanceTypeEdge]!
}

"""A Relay edge containing a `AttendanceType` and its cursor."""
type AttendanceTypeEdge {
  """The item at the end of the edge"""
  node: AttendanceType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The Attendance object"""
type AttendanceType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  meeting: MeetingType

  """"""
  user: UserType

  """"""
  present: Boolean!

  """"""
  interested: Boolean!

  """"""
  excuse: String

  """"""
  excuseApproved: Boolean

  """"""
  excuseTime: DateTime

  """"""
  approvedBy: UserType

  """"""
  org: OrganizationType

  """"""
  created: DateTime!

  """"""
  updated: DateTime!
}

type PresenterTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PresenterTypeEdge]!
}

"""A Relay edge containing a `PresenterType` and its cursor."""
type PresenterTypeEdge {
  """The item at the end of the edge"""
  node: PresenterType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The Presenter object"""
type PresenterType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  meeting: MeetingType
  person: UserType

  """If the author is not a member"""
  name: String

  """
  The Presenter's skills,                             qualifications, education,
  """
  portfolio: String

  """"""
  picture: String

  """"""
  bio: String

  """"""
  slug: String

  """"""
  org: OrganizationType

  """"""
  created: DateTime!

  """"""
  updated: DateTime!

  """If the author is a member, select author from the list"""
  presentationSet(offset: Int, before: String, after: String, first: Int, last: Int, title: String, meeting: ID, author: [ID], externalUpload: String): PresentationTypeConnection!

  """"""
  speaker(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, location: String, title: String, description: String): ScheduleTypeConnection!
  photoUrl: String
}

type PresentationTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PresentationTypeEdge]!
  totalCount: Int
  edgeCount: Int
}

"""A Relay edge containing a `PresentationType` and its cursor."""
type PresentationTypeEdge {
  """The item at the end of the edge"""
  node: PresentationType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The Presentation object"""
type PresentationType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  title: String!

  """"""
  abstract: String!

  """
  If presentation document is uploaded on another service, paste link here so that members can download it
  """
  externalUpload: String

  """"""
  slug: String

  """This is the count of the number of views/ downloads of this document"""
  view: Int!

  """"""
  created: DateTime!

  """"""
  updated: DateTime!

  """"""
  org: OrganizationType

  """"""
  meeting: MeetingType

  """Upload PDF or Power point presentation document"""
  file: String!

  """If the author is a member, select author from the list"""
  author(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, person: ID, name: String, slug: String): PresenterTypeConnection!
  fileUrl: String
}

type ScheduleTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ScheduleTypeEdge]!
}

"""A Relay edge containing a `ScheduleType` and its cursor."""
type ScheduleTypeEdge {
  """The item at the end of the edge"""
  node: ScheduleType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The Event Schedule object"""
type ScheduleType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  meeting: MeetingType

  """"""
  title: String!

  """"""
  location: String!

  """"""
  description: String

  """"""
  scheduleDate: Date

  """"""
  scheduleStartTime: Time

  """"""
  scheduleEndTime: Time

  """"""
  speaker: PresenterType
}

type AnnouncementTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [AnnouncementTypeEdge]!
}

"""A Relay edge containing a `AnnouncementType` and its cursor."""
type AnnouncementTypeEdge {
  """The item at the end of the edge"""
  node: AnnouncementType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The Announcement model"""
type AnnouncementType implements Node {
  """The ID of the object."""
  id: ID!

  """
  What this announcement is about, it would appear as the email subject also
  """
  title: String!

  """Details of the announcement. This would appear as the email body"""
  body: String

  """This would appear as a Push Notification/ SMS"""
  sms: String

  """"""
  image: String

  """Set Announcement Type to the audience"""
  announcementType: String!

  """"""
  actionText: String

  """"""
  actionLink: String

  """"""
  event: MeetingType

  """"""
  org: OrganizationType

  """"""
  createdBy: UserType

  """"""
  created: DateTime!

  """"""
  updated: DateTime!
  pk: ID!
  photoUrl: String
}

type FeedbackTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [FeedbackTypeEdge]!
}

"""A Relay edge containing a `FeedbackType` and its cursor."""
type FeedbackTypeEdge {
  """The item at the end of the edge"""
  node: FeedbackType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The Event Feedback Object"""
type FeedbackType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  meeting: MeetingType

  """"""
  respondent: UserType

  """"""
  lectureDelivery: String

  """"""
  participantsEngagement: String

  """"""
  keyTakeaway: String

  """"""
  likedMost: String

  """"""
  likedLeast: String

  """"""
  otherComments: String
}

type HowDidYouHearAboutUsTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [HowDidYouHearAboutUsTypeEdge]!
}

"""A Relay edge containing a `HowDidYouHearAboutUsType` and its cursor."""
type HowDidYouHearAboutUsTypeEdge {
  """The item at the end of the edge"""
  node: HowDidYouHearAboutUsType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The How Did You Hear About Us Object"""
type HowDidYouHearAboutUsType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  meeting: MeetingType

  """"""
  organization: OrganizationType

  """"""
  respondent: UserType

  """"""
  response: String
}

type WebsiteBannerSliderImageTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [WebsiteBannerSliderImageTypeEdge]!
}

"""
A Relay edge containing a `WebsiteBannerSliderImageType` and its cursor.
"""
type WebsiteBannerSliderImageTypeEdge {
  """The item at the end of the edge"""
  node: WebsiteBannerSliderImageType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The website banner images type"""
type WebsiteBannerSliderImageType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  org: OrganizationType

  """"""
  website: WebsiteType

  """"""
  bannerTitle: String

  """"""
  bannerSubtitle: String

  """"""
  bannerBgImage: String
  bannerBgImageUrl: String
}

type WebsiteFaqTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [WebsiteFaqTypeEdge]!
}

"""A Relay edge containing a `WebsiteFaqType` and its cursor."""
type WebsiteFaqTypeEdge {
  """The item at the end of the edge"""
  node: WebsiteFaqType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The WebsiteFAQ Model object"""
type WebsiteFaqType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  organization: OrganizationType

  """"""
  question: String

  """"""
  answer: String

  """"""
  createdBy: UserType

  """"""
  created: DateTime!

  """"""
  updated: DateTime!
}

type MeetingCategoryTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [MeetingCategoryTypeEdge]!
}

"""A Relay edge containing a `MeetingCategoryType` and its cursor."""
type MeetingCategoryTypeEdge {
  """The item at the end of the edge"""
  node: MeetingCategoryType

  """A cursor for use in pagination"""
  cursor: String!
}

type PublicationCategoryTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PublicationCategoryTypeEdge]!
}

"""A Relay edge containing a `PublicationCategoryType` and its cursor."""
type PublicationCategoryTypeEdge {
  """The item at the end of the edge"""
  node: PublicationCategoryType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The PublicationCategory Model Object"""
type PublicationCategoryType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  org: OrganizationType

  """"""
  name: String!

  """"""
  description: String

  """"""
  publicationSet(offset: Int, before: String, after: String, first: Int, last: Int, id: Float, title: String, org_Id: Float, externalUpload: String, category_Id: Float): PublicationTypeConnection!
}

type PublicationTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [PublicationTypeEdge]!
  totalCount: Int
  edgeCount: Int
}

"""A Relay edge containing a `PublicationType` and its cursor."""
type PublicationTypeEdge {
  """The item at the end of the edge"""
  node: PublicationType

  """A cursor for use in pagination"""
  cursor: String!
}

"""The Publication object"""
type PublicationType implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  title: String!

  """"""
  abstract: String!

  """
  If presentation document is uploaded on another service, paste link here so that members can download it
  """
  externalUpload: String

  """"""
  slug: String

  """This is the count of the number of views/ downloads of this document"""
  view: Int!

  """"""
  created: DateTime!

  """"""
  updated: DateTime!

  """"""
  org: OrganizationType

  """"""
  category: PublicationCategoryType

  """Upload PDF or Power point presentation document"""
  file: String!

  """"""
  paidDownload: Boolean!

  """"""
  amountPayableCurrency: String!

  """How much to pay if it is a paid download"""
  amountPayable: Decimal
  fileUrl: String
  pk: ID!
}

"""The UserSetting object"""
type UserSettingType {
  """"""
  id: ID!

  """"""
  user: UserType

  """"""
  sms: Boolean!

  """"""
  email: Boolean!

  """"""
  push: Boolean!

  """"""
  createdAt: DateTime!

  """"""
  updatedAt: DateTime!
}

type PageDataListType {
  conferencePageData: PageDataType
}

type PageDataType {
  event: MeetingType
  organization: OrganizationType
  presenters: [PresenterType]
  schedules: [ScheduleType]
  presentations: [PresentationType]
  website: WebsiteType
  tickets: [TicketType]
  sponsors: [SponsorType]
}

type EventCheckInType {
  user: UserType
  attendance: AttendanceType
}

type UserNode implements Node {
  """The ID of the object."""
  id: ID!

  """"""
  lastLogin: DateTime

  """Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only."""
  username: String!

  """"""
  firstName: String!

  """"""
  lastName: String!

  """"""
  email: String!

  """Designates whether the user can log into this admin site."""
  isStaff: Boolean!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!

  """"""
  dateJoined: DateTime!

  """"""
  middleName: String!

  """Write in international phone no format (+234 or +41)"""
  phone: String

  """Enter birthday in YYYY-MM-DD format """
  dob: Date

  """Indicates if a new user has confirmed email"""
  confirmedEmail: Boolean

  """Indicates if a new user has confirmed phone number"""
  confirmedPhone: Boolean

  """"""
  bio: String

  """Upload size of photo should be a maximum of 2mb"""
  photo: String

  """"""
  qrCodeFile: String

  """"""
  socialAuthPhotoUrl: String

  """"""
  gender: AccountsUserGenderChoices

  """"""
  address: String

  """"""
  postal: String

  """"""
  timezone: AccountsUserTimezoneChoices!

  """"""
  state: AccountsUserStateChoices

  """"""
  country: AccountsUserCountryChoices!

  """"""
  nationality: AccountsUserNationalityChoices!

  """"""
  kinsman(offset: Int, before: String, after: String, first: Int, last: Int, user_Id: Float, firstName: String, lastName: String, middleName: String, email: String, phone: String, relationship: String): NextOfKinModelTypeConnection!

  """"""
  records(offset: Int, before: String, after: String, first: Int, last: Int, program: String, user_Id: Float, school_Id: Float, discipline_Id: Float, admitted: Date, graduated: Date, current: Boolean): AcademicRecordModelTypeConnection!

  """"""
  workexperienceSet(offset: Int, before: String, after: String, first: Int, last: Int, user_Id: Float, companyName: String, designation: String, startDate: Date, endDate: Date, current: Boolean, description: String, state: String, country: String): WorkExperienceModelTypeConnection!

  """"""
  creator(offset: Int, before: String, after: String, first: Int, last: Int, name: String, abbrev: String, slug: String, myOrg_Approved: Boolean, myOrg_Blocked: Boolean, myOrg_User: ID): OrganizationTypeConnection!

  """"""
  orgCreator(offset: Int, before: String, after: String, first: Int, last: Int, organization: ID, creator: ID, user: ID): OrgAdminTypeConnection!

  """"""
  orgAdmins(offset: Int, before: String, after: String, first: Int, last: Int, organization: ID, creator: ID, user: ID): OrgAdminTypeConnection!

  """"""
  orgadmininvitationSet(offset: Int, before: String, after: String, first: Int, last: Int, organization: ID): OrgAdminInvitationTypeConnection!

  """"""
  organizationmembershiptypeSet: [OrgMembershipType!]!

  """"""
  membersMembershippayments(offset: Int, before: String, after: String, first: Int, last: Int, org_Id: Float, user_Id: Float, membershipType: ID, paid: Boolean, paymentType: String, paymentApproval: Boolean): MembershipPaymentTypeConnection!

  """The User that wants to join the organization"""
  member(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, user_Id: Float, subdivision_Id: Float, newOrOld: String, orgNumber: String, verified: Boolean, approved: Boolean): JoinRequestTypeConnection!

  """
  The Admin that approved - if joining with Organization is not automatic
  """
  acceptor(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, user_Id: Float, subdivision_Id: Float, newOrOld: String, orgNumber: String, verified: Boolean, approved: Boolean): JoinRequestTypeConnection!

  """The Admin that blocked the person"""
  blocker(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, user_Id: Float, subdivision_Id: Float, newOrOld: String, orgNumber: String, verified: Boolean, approved: Boolean): JoinRequestTypeConnection!

  """"""
  importcontactSet(offset: Int, before: String, after: String, first: Int, last: Int, organization: ID, firstName: String, lastName: String, used: Boolean): MemberInvitationTypeConnection!

  """"""
  faqCreator(offset: Int, before: String, after: String, first: Int, last: Int, organization_Id: Float, createdBy_Id: Float): WebsiteFaqTypeConnection!

  """"""
  meetingSet(offset: Int, before: String, after: String, first: Int, last: Int, name: String, theme: String, venue: String, org_Slug: String, category_Name: String, category_Id: Float): MeetingTypeConnection!

  """"""
  ticketSet(offset: Int, before: String, after: String, first: Int, last: Int, name: String, meeting_Id: Float, org_Id: Float, earlyBirdFee: String, earlyBirdDeadline: Date, lateBirdFee: String): TicketTypeConnection!

  """"""
  conferencePayments(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, ticket: ID, paid: Boolean, paymentType: String, paymentApproval: Boolean): PaymentTypeConnection!

  """"""
  attendanceSet(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, present: Boolean, excuse: String, interested: Boolean): AttendanceTypeConnection!

  """"""
  approveAdmin(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, present: Boolean, excuse: String, interested: Boolean): AttendanceTypeConnection!

  """"""
  presenterPerson(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, person: ID, name: String, slug: String): PresenterTypeConnection!

  """"""
  presentationCreator(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, person: ID, name: String, slug: String): PresenterTypeConnection!

  """"""
  presentationSet(offset: Int, before: String, after: String, first: Int, last: Int, title: String, meeting: ID, author: [ID], externalUpload: String): PresentationTypeConnection!

  """"""
  publicationSet(offset: Int, before: String, after: String, first: Int, last: Int, id: Float, title: String, org_Id: Float, externalUpload: String, category_Id: Float): PublicationTypeConnection!

  """"""
  announcementSet(offset: Int, before: String, after: String, first: Int, last: Int, title: String, body: String, announcementType: String): AnnouncementTypeConnection!

  """"""
  feedbackSet(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, respondent: ID): FeedbackTypeConnection!

  """"""
  howdidyouhearaboutusSet(offset: Int, before: String, after: String, first: Int, last: Int, meeting: ID, organization: ID, respondent: ID): HowDidYouHearAboutUsTypeConnection!

  """"""
  memberUsers(offset: Int, before: String, after: String, first: Int, last: Int, user_Id: Float, event_Id: Float, ticket_Id: Float, organization_Id: Float): ConferenceRegistrationTypeConnection!
  notificationSetting: UserSettingType

  """"""
  sender: [NotificationType!]!
  pk: Int
  archived: Boolean
  verified: Boolean
  secondaryEmail: String
}

type SchoolModelTypeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SchoolModelTypeEdge]!
}

"""A Relay edge containing a `SchoolModelType` and its cursor."""
type SchoolModelTypeEdge {
  """The item at the end of the edge"""
  node: SchoolModelType

  """A cursor for use in pagination"""
  cursor: String!
}

"""Debugging information for the current query."""
type DjangoDebug {
  """Executed SQL queries for this API query."""
  sql: [DjangoDebugSQL]
}

"""Represents a single database query made to a Django managed DB."""
type DjangoDebugSQL {
  """The type of database being used (e.g. postrgesql, mysql, sqlite)."""
  vendor: String!

  """The Django database alias (e.g. 'default')."""
  alias: String!

  """The actual SQL sent to this database."""
  sql: String

  """Duration of this database query in seconds."""
  duration: Float!

  """The raw SQL of this query, without params."""
  rawSql: String!

  """JSON encoded database query parameters."""
  params: String!

  """Start time of this database query."""
  startTime: Float!

  """Stop time of this database query."""
  stopTime: Float!

  """Whether this database query took more than 10 seconds."""
  isSlow: Boolean!

  """Whether this database query was a SELECT."""
  isSelect: Boolean!

  """Postgres transaction ID if available."""
  transId: String

  """Postgres transaction status if available."""
  transStatus: String

  """Postgres isolation level if available."""
  isoLevel: String

  """Postgres connection encoding if available."""
  encoding: String
}

type RootMutation {
  """Create a Potential Client"""
  createClient(input: PotentialClientMutationInput!): PotentialClientMutationPayload

  """Update the Notification settings of a User"""
  notificationSettings(email: Boolean, push: Boolean, sms: Boolean): NotificationSettingsMutation

  """Allow a user join an organization and submit the necessary information"""
  joinOrganization(input: JoinOrganizationMutationInput!): JoinOrganizationMutationPayload

  """
  Leave an Organization Mutation.
  Authenticated user should be able to leave an org
  """
  leaveOrganization(orgId: ID!): LeaveOrgMutation
  orgAdminInvitation(orgSlug: String, uuid: UUID): OrgAdminInvitationMutation
  memberInvitation(orgSlug: String, uuid: UUID): MemberInvitationMutation

  """Create online payment record with proof of payments and necessary data"""
  confirmMembershipOnlinePayment(amountPaid: Int, membershipTypeId: Int, orgPk: Int, paid: Boolean, paymentApproval: Boolean, paymentDate: String, paymentName: String, paymentStatus: String, paymentType: String, txref: String, userId: Int): ConfirmMembershipOnlinePaymentMutation

  """
  Create offline payment record with proof of payments and necessary data
  """
  confirmMembershipOfflinePayment(amountPaid: Int, membershipTypeId: Int, orgPk: Int, paid: Boolean, payerName: String, paymentDate: String, paymentName: String, paymentStatus: String, paymentType: String, proofOfPayment: Upload!, txref: String, userId: Int): ConfirmMembershipOfflinePaymentMutation

  """Sends an email to all org admins in the organization"""
  contactOrganizationAdmins(email: String, emailMessage: String, name: String, orgPk: Int): ContactOrganizationAdminsMutation

  """Create OrgSubDivision information"""
  subdivision(input: OrgSubDivisionMutationInput!): OrgSubDivisionMutationPayload

  """Delete an OrgSubDivision"""
  subdivisionDelete(id: ID!): OrgSubDivisionDeleteMutation

  """
  Sends an email informing the user that their membership application was successful
  """
  membershipApplicationSubmission(orgId: ID!, userId: ID!): MembershipApplicationSubmission

  """Create a schedule for an event"""
  createSchedule(description: String, eventSlug: String, location: String, scheduleDate: Date, scheduleEndTime: Time, scheduleStartTime: Time, speaker: String, title: String): CreateSchedule

  """Register your interest to attend an event"""
  createInterest(eventSlug: String, orgSlug: String): CreateInterest

  """Take attendance of a logged in user for an event"""
  attendance(code: Int, eventId: Int, orgId: Int): TakeAttendance
  paidRegistration(email: String, firstName: String, lastName: String, meetingId: Int, orgId: Int, phone: String, ticketId: Int): PaidEventRegistration

  """Submit feedback for an attended event"""
  submitFeedback(eventSlug: String, howDidYouHearAboutUs: String, keyTakeaway: String, lectureDelivery: String, likedLeast: String, likedMost: String, otherComments: String, participantEngagement: String): SubmitFeedback

  """Take an excuse for a member of the Org hosting the event"""
  takeExcuse(eventId: Int, excuse: String, orgId: Int): TakeExcuseMutation

  """
  Prepares and responds with an invitation letter for a member.
  :arguments - Full name, Address Line 1 and Address Line 2
  """
  downloadInvitationLetter(addressLine1: String, addressLine2: String, domainName: String, fullName: String): DownloadInvitationLetterMutation

  """Download Certificate of an event, based on pre-selected conditions"""
  downloadCertificate(domainName: String, fullName: String): DownloadCertificateMutation

  """
  For Online: create payments record with proof of payments and necessary data
  """
  confirmConferenceOnlinePayment(amountPaid: Int, meetingId: Int, orgId: Int, paid: Boolean, paymentApproval: Boolean, paymentDate: String, paymentName: String, paymentType: String, ticketId: Int, txref: String, userId: Int): ConfirmConferenceOnlinePaymentMutation

  """
  For Offline: create payments record with proof of payments and necessary data
  """
  confirmConferenceOfflinePayment(amountPaid: Int, meetingId: Int, orgId: Int, paid: Boolean, payerName: String, paymentDate: String, paymentName: String, paymentType: String, proofOfPayment: Upload!, ticketId: Int, txref: String, userId: Int): ConfirmConferenceOfflinePaymentMutation

  """Take attendance of a user for an event"""
  checkInMember(eventId: Int!, orgId: Int!, userEmail: String, userId: Int): CheckInMemberForEvent

  """Undo the attendance taken for a user for an event"""
  checkOutMember(eventId: Int!, orgId: Int!, userEmail: String, userId: Int): CheckOutMemberForEvent

  """
  Registers both member or non_member for conference/event
  and indicate the ticket type they're registering with
  """
  conferenceRegistration(input: ConferenceRegistrationMutationInput!): ConferenceRegistrationMutationPayload

  """
  Checks if email belongs to
  a member or already registered
  """
  checkRegistrationEmail(email: String!, eventId: ID!): ConferenceRegistrationEmailCheckMutation

  """Upload Profile Image for a user"""
  profilePicture(file: Upload!): UserProfilePhoto

  """Verify a Google Sign in on the app"""
  googleSignIn(googleId: String!): GoogleSignIn

  """Create/Update a User's Academic Information"""
  userAcademicInformation(admitted: Date, certificate: Upload, current: Boolean, discipline: String, graduated: String, id: ID, program: String, school: String): UserAcademicRecord

  """Create User's work experience record"""
  userWorkExperience(input: UserWorkExperienceMutationInput!): UserWorkExperienceMutationPayload

  """Delete an WorkExperience"""
  userWorkExperienceDelete(id: ID!): WorkExperienceDeleteMutation

  """Delete an AcademicRecord"""
  academicRecordDelete(id: ID!): AcademicRecordDeleteMutation

  """Upload certificate for a User Academic Record"""
  uploadAcademicCertificate(academicRecordId: ID!, file: Upload!): UploadAcademicRecordCertificate

  """Create NextOfKin information"""
  nextOfKin(input: NextOfKinMutationInput!): NextOfKinMutationPayload

  """Delete an NextOfKin"""
  nextOfKinDelete(id: ID!): NextOfKinDeleteMutation
  register(email: String!, username: String!, firstName: String!, lastName: String!, password1: String!, password2: String!): RegisterUser
  registerByOrganization(orgId: Int, email: String!, username: String!, firstName: String!, lastName: String!, password1: String!, password2: String!): RegisterUserByOrganization

  """
  Verify user account.
  
  Receive the token that was sent by email.
  If the token is valid, make the user verified
  by making the `user.status.verified` field true.
  """
  verifyAccount(code: String!): VerifyAccount

  """
  Verify user account.
  
  Receive the token that was sent by email.
  If the token is valid, make the user verified
  by making the `user.status.verified` field true.
  """
  verifyAccountByOrganization(code: String!, orgId: Int!): VerifyAccountByOrganization

  """Verify reset password token sent to user email."""
  verifyPasswordResetToken(code: String!): VerifyResetPasswordToken
  resendActivationEmail(email: String!): ResendActivationEmail

  """
  Send password reset email.
  For non verified users, send an activation
  email instead.
  """
  sendPasswordResetEmail(email: String!): SendPasswordResetEmail
  passwordReset(token: String!, newPassword1: String!, newPassword2: String!): PasswordReset

  """
  Change account password when user knows the old password.
  
  A new token and refresh token are sent. User may not be verified.
  """
  passwordChange(oldPassword: String!, newPassword1: String!, newPassword2: String!): PasswordChangeWithoutVerification

  """
  Archive account and revoke refresh tokens.
  
  User must be verified and confirm password.
  """
  archiveAccount(password: String!): ArchiveAccount

  """
  Delete account permanently or make `user.is_active=False`.
  
  The behavior is defined on settings.
  Anyway user refresh tokens are revoked.
  
  User must be verified and confirm password.
  """
  deleteAccount(password: String!): DeleteAccount

  """
  Update user model fields, defined on settings.
  
  User must be verified.
  """
  updateAccount(email: String, phone: String, firstName: String, lastName: String, dob: String, bio: String, photo: String, gender: String, address: String, postal: String, state: String, country: String, middleName: String, nationality: String): UpdateAccount

  """
  Obtain JSON web token for given user.
  
  Allow to perform login with different fields,
  and secondary email if set. The fields are
  defined on settings.
  
  Not verified users can login by default. This
  can be changes on settings.
  
  If user is archived, make it unarchive and
  return `unarchiving=True` on output.
  """
  login(password: String!, email: String, username: String): ObtainJSONWebToken

  """Same as `grapgql_jwt` implementation, with standard output."""
  verifyToken(token: String!): VerifyToken

  """Same as `grapgql_jwt` implementation, with standard output."""
  refreshToken(refreshToken: String!): RefreshToken

  """Same as `grapgql_jwt` implementation, with standard output."""
  revokeToken(refreshToken: String!): RevokeToken
}

"""Create a Potential Client"""
type PotentialClientMutationPayload {
  fullname: String
  email: String
  phonenumber: String
  organization: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

type ErrorType {
  field: String!
  messages: [String!]!
}

input PotentialClientMutationInput {
  fullname: String!
  email: String!
  phonenumber: String!
  organization: String!
  clientMutationId: String
}

"""Update the Notification settings of a User"""
type NotificationSettingsMutation {
  settings: UserSettingType
}

"""Allow a user join an organization and submit the necessary information"""
type JoinOrganizationMutationPayload {
  id: Int
  approved: Boolean
  blocked: Boolean
  verified: Boolean
  membershipApplicationCompleted: Boolean
  rejectionReason: String
  contactMessage: String
  newOrOld: String
  orgNumber: String
  nseNumber: String
  corenNumber: String
  refereeOneNumber: String
  refereeOneName: String
  refereeTwoNumber: String
  refereeTwoName: String
  refereeThreeNumber: String
  refereeThreeName: String
  otherSpecialty: String
  paymentName: String
  amountOwingCurrency: String

  """Amount owed to the organization"""
  amountOwing: Float
  amountOwingReason: String
  organization: String

  """The User that wants to join the organization"""
  user: String

  """
  The Admin that approved - if joining with Organization is not automatic
  """
  admin: String

  """The Admin that blocked the person"""
  blockedBy: String
  subdivision: String
  membershipCadre: String
  specialty: String
  subSpecialty: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input JoinOrganizationMutationInput {
  id: Int
  approved: Boolean
  blocked: Boolean
  verified: Boolean
  membershipApplicationCompleted: Boolean
  rejectionReason: String
  contactMessage: String
  newOrOld: String
  orgNumber: String
  nseNumber: String
  corenNumber: String
  refereeOneNumber: String
  refereeOneName: String
  refereeTwoNumber: String
  refereeTwoName: String
  refereeThreeNumber: String
  refereeThreeName: String
  otherSpecialty: String
  paymentName: String

  """Amount owed to the organization"""
  amountOwing: Float
  amountOwingReason: String
  organization: String

  """The User that wants to join the organization"""
  user: String!

  """
  The Admin that approved - if joining with Organization is not automatic
  """
  admin: String

  """The Admin that blocked the person"""
  blockedBy: String
  subdivision: String
  membershipCadre: String
  specialty: String
  subSpecialty: String
  clientMutationId: String
}

"""
Leave an Organization Mutation.
Authenticated user should be able to leave an org
"""
type LeaveOrgMutation {
  request: JoinRequestType
}

type OrgAdminInvitationMutation {
  orgAdminInvitation: OrgAdminInvitationType
  success: Boolean
}

type MemberInvitationMutation {
  memberInvitation: MemberInvitationType
  success: Boolean
}

"""Create online payment record with proof of payments and necessary data"""
type ConfirmMembershipOnlinePaymentMutation {
  error: String
  success: Boolean
}

"""
Create offline payment record with proof of payments and necessary data
"""
type ConfirmMembershipOfflinePaymentMutation {
  error: String
  success: Boolean
}

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload

"""Sends an email to all org admins in the organization"""
type ContactOrganizationAdminsMutation {
  error: String
  success: Boolean
}

"""Create OrgSubDivision information"""
type OrgSubDivisionMutationPayload {
  id: Int
  subdivision: String
  chairperson: String
  phoneNumber: String
  email: String
  meetingDaysTime: String
  meetingVenue: String
  dateOfInauguration: Date
  state: String
  type: String
  created: DateTime
  updated: DateTime
  organization: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input OrgSubDivisionMutationInput {
  id: Int
  subdivision: String!
  chairperson: String
  phoneNumber: String
  email: String
  meetingDaysTime: String
  meetingVenue: String
  dateOfInauguration: Date
  state: String
  type: String
  organization: String
  clientMutationId: String
}

"""Delete an OrgSubDivision"""
type OrgSubDivisionDeleteMutation {
  ok: Boolean
}

"""
Sends an email informing the user that their membership application was successful
"""
type MembershipApplicationSubmission {
  success: Boolean
}

"""Create a schedule for an event"""
type CreateSchedule {
  schedule: ScheduleType
}

"""Register your interest to attend an event"""
type CreateInterest {
  attendance: AttendanceType
  success: Boolean
}

"""Take attendance of a logged in user for an event"""
type TakeAttendance {
  attendance: AttendanceType
  success: Boolean
}

type PaidEventRegistration {
  payment: PaymentType
  error: String
}

"""Submit feedback for an attended event"""
type SubmitFeedback {
  feedback: FeedbackType
  howDidYouHearAboutUs: HowDidYouHearAboutUsType
  success: Boolean
}

"""Take an excuse for a member of the Org hosting the event"""
type TakeExcuseMutation {
  attendance: AttendanceType
  success: Boolean
}

"""
Prepares and responds with an invitation letter for a member.
:arguments - Full name, Address Line 1 and Address Line 2
"""
type DownloadInvitationLetterMutation {
  invitationLetter: String
  success: Boolean
}

"""Download Certificate of an event, based on pre-selected conditions"""
type DownloadCertificateMutation {
  certificate: String
  success: Boolean
}

"""
For Online: create payments record with proof of payments and necessary data
"""
type ConfirmConferenceOnlinePaymentMutation {
  error: String
  success: Boolean
}

"""
For Offline: create payments record with proof of payments and necessary data
"""
type ConfirmConferenceOfflinePaymentMutation {
  error: String
  success: Boolean
}

"""Take attendance of a user for an event"""
type CheckInMemberForEvent {
  attendance: AttendanceType
  success: Boolean
}

"""Undo the attendance taken for a user for an event"""
type CheckOutMemberForEvent {
  attendance: AttendanceType
  success: Boolean
}

"""
Registers both member or non_member for conference/event
and indicate the ticket type they're registering with
"""
type ConferenceRegistrationMutationPayload {
  id: Int
  email: String
  firstName: String
  middleName: String
  lastName: String

  """e.g. +2348012345678"""
  phone: String
  user: String
  event: String
  ticket: String
  organization: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input ConferenceRegistrationMutationInput {
  id: Int
  email: String
  firstName: String
  middleName: String
  lastName: String

  """e.g. +2348012345678"""
  phone: String
  user: String
  event: String
  ticket: String
  organization: String
  clientMutationId: String
}

"""
Checks if email belongs to
a member or already registered
"""
type ConferenceRegistrationEmailCheckMutation {
  success: Boolean
  message: String
  conferenceDetails: ConferenceRegistrationType
}

"""Upload Profile Image for a user"""
type UserProfilePhoto {
  ok: Boolean
  photoUrl: String
}

"""Verify a Google Sign in on the app"""
type GoogleSignIn {
  ok: Boolean
  token: String
}

"""Create/Update a User's Academic Information"""
type UserAcademicRecord {
  success: Boolean
  errors: String
  academicData: AcademicRecordModelType
}

"""Create User's work experience record"""
type UserWorkExperienceMutationPayload {
  id: Int
  uuid: String
  companyName: String

  """YYYY-MM-DD"""
  startDate: Date

  """YYYY-MM-DD, Leave blank if still working in that role"""
  endDate: Date
  designation: String

  """Full description of what you duties entails"""
  description: String

  """Indicates if this is your current work"""
  current: Boolean
  address: String
  state: String
  country: String
  created: DateTime
  updated: DateTime
  user: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input UserWorkExperienceMutationInput {
  id: Int
  companyName: String

  """YYYY-MM-DD"""
  startDate: Date!

  """YYYY-MM-DD, Leave blank if still working in that role"""
  endDate: Date
  designation: String

  """Full description of what you duties entails"""
  description: String

  """Indicates if this is your current work"""
  current: Boolean
  address: String
  state: String
  country: String
  user: String!
  clientMutationId: String
}

"""Delete an WorkExperience"""
type WorkExperienceDeleteMutation {
  ok: Boolean
}

"""Delete an AcademicRecord"""
type AcademicRecordDeleteMutation {
  ok: Boolean
}

"""Upload certificate for a User Academic Record"""
type UploadAcademicRecordCertificate {
  ok: Boolean
  fileUrl: String
}

"""Create NextOfKin information"""
type NextOfKinMutationPayload {
  id: Int
  firstName: String
  lastName: String
  middleName: String
  email: String

  """Write in international phone no format (+234 or +41)"""
  phone: String
  relationship: String
  user: String

  """May contain more than one error for same field."""
  errors: [ErrorType]
  clientMutationId: String
}

input NextOfKinMutationInput {
  id: Int
  firstName: String
  lastName: String
  middleName: String
  email: String

  """Write in international phone no format (+234 or +41)"""
  phone: String
  relationship: String
  user: String!
  clientMutationId: String
}

"""Delete an NextOfKin"""
type NextOfKinDeleteMutation {
  ok: Boolean
}

type RegisterUser {
  success: Boolean
  errors: ExpectedErrorType
  refreshToken: String
  token: String
}

"""
Errors messages and codes mapped to
fields or non fields errors.
Example:
{
    field_name: [
        {
            "message": "error message",
            "code": "error_code"
        }
    ],
    other_field: [
        {
            "message": "error message",
            "code": "error_code"
        }
    ],
    nonFieldErrors: [
        {
            "message": "error message",
            "code": "error_code"
        }
    ]
}
"""
scalar ExpectedErrorType

type RegisterUserByOrganization {
  success: Boolean
  errors: ExpectedErrorType
  refreshToken: String
  token: String
}

"""
Verify user account.

Receive the token that was sent by email.
If the token is valid, make the user verified
by making the `user.status.verified` field true.
"""
type VerifyAccount {
  ok: Boolean
  error: String
}

"""
Verify user account.

Receive the token that was sent by email.
If the token is valid, make the user verified
by making the `user.status.verified` field true.
"""
type VerifyAccountByOrganization {
  ok: Boolean
  error: String
}

"""Verify reset password token sent to user email."""
type VerifyResetPasswordToken {
  ok: Boolean
  error: String
}

type ResendActivationEmail {
  ok: Boolean
  error: String
}

"""
Send password reset email.
For non verified users, send an activation
email instead.
"""
type SendPasswordResetEmail {
  ok: Boolean
  error: String
}

type PasswordReset {
  success: Boolean
  errors: ExpectedErrorType
}

"""
Change account password when user knows the old password.

A new token and refresh token are sent. User may not be verified.
"""
type PasswordChangeWithoutVerification {
  success: Boolean
  errors: ExpectedErrorType
  refreshToken: String
  token: String
}

"""
Archive account and revoke refresh tokens.

User must be verified and confirm password.
"""
type ArchiveAccount {
  success: Boolean
  errors: ExpectedErrorType
}

"""
Delete account permanently or make `user.is_active=False`.

The behavior is defined on settings.
Anyway user refresh tokens are revoked.

User must be verified and confirm password.
"""
type DeleteAccount {
  success: Boolean
  errors: ExpectedErrorType
}

"""
Update user model fields, defined on settings.

User must be verified.
"""
type UpdateAccount {
  success: Boolean
  errors: ExpectedErrorType
}

"""
Obtain JSON web token for given user.

Allow to perform login with different fields,
and secondary email if set. The fields are
defined on settings.

Not verified users can login by default. This
can be changes on settings.

If user is archived, make it unarchive and
return `unarchiving=True` on output.
"""
type ObtainJSONWebToken {
  token: String
  success: Boolean
  errors: ExpectedErrorType
  user: UserNode
  unarchiving: Boolean
  refreshToken: String
}

"""Same as `grapgql_jwt` implementation, with standard output."""
type VerifyToken {
  payload: GenericScalar
  success: Boolean
  errors: ExpectedErrorType
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""Same as `grapgql_jwt` implementation, with standard output."""
type RefreshToken {
  token: String
  payload: GenericScalar
  success: Boolean
  errors: ExpectedErrorType
  refreshToken: String
}

"""Same as `grapgql_jwt` implementation, with standard output."""
type RevokeToken {
  revoked: Int
  success: Boolean
  errors: ExpectedErrorType
}
